/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface MetaStockUtilsInterface extends utils.Interface {
  functions: {
    "addLiquidity(address,address,uint256,uint256,address)": FunctionFragment;
    "autoLiquidity(address,address,uint256,address)": FunctionFragment;
    "getPathForTokensToTokens(address,address)": FunctionFragment;
    "sendToTeam(address,address[],uint256[])": FunctionFragment;
    "swapTokensForBNB(address,address,uint256)": FunctionFragment;
    "swapTokensForUSD(address,address,address,uint256)": FunctionFragment;
    "swapUSDForTokens(address,address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addLiquidity"
      | "autoLiquidity"
      | "getPathForTokensToTokens"
      | "sendToTeam"
      | "swapTokensForBNB"
      | "swapTokensForUSD"
      | "swapUSDForTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "autoLiquidity",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPathForTokensToTokens",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendToTeam",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForBNB",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForUSD",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapUSDForTokens",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "autoLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPathForTokensToTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendToTeam", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForBNB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapUSDForTokens",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MetaStockUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MetaStockUtilsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLiquidity(
      dexRouter: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      ethAmount: PromiseOrValue<BigNumberish>,
      lpReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    autoLiquidity(
      dexRouter: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      lpReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPathForTokensToTokens(
      tokenAddressA: PromiseOrValue<string>,
      tokenAddressB: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    sendToTeam(
      tokenAddress: PromiseOrValue<string>,
      wallets: PromiseOrValue<string>[],
      percentages: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapTokensForBNB(
      dexRouter: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapTokensForUSD(
      dexRouter: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      usd: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapUSDForTokens(
      dexRouter: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      usd: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addLiquidity(
    dexRouter: PromiseOrValue<string>,
    tokenAddress: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    ethAmount: PromiseOrValue<BigNumberish>,
    lpReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  autoLiquidity(
    dexRouter: PromiseOrValue<string>,
    tokenAddress: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    lpReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPathForTokensToTokens(
    tokenAddressA: PromiseOrValue<string>,
    tokenAddressB: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  sendToTeam(
    tokenAddress: PromiseOrValue<string>,
    wallets: PromiseOrValue<string>[],
    percentages: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapTokensForBNB(
    dexRouter: PromiseOrValue<string>,
    tokenAddress: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapTokensForUSD(
    dexRouter: PromiseOrValue<string>,
    tokenAddress: PromiseOrValue<string>,
    usd: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapUSDForTokens(
    dexRouter: PromiseOrValue<string>,
    tokenAddress: PromiseOrValue<string>,
    usd: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidity(
      dexRouter: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      ethAmount: PromiseOrValue<BigNumberish>,
      lpReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    autoLiquidity(
      dexRouter: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      lpReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getPathForTokensToTokens(
      tokenAddressA: PromiseOrValue<string>,
      tokenAddressB: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    sendToTeam(
      tokenAddress: PromiseOrValue<string>,
      wallets: PromiseOrValue<string>[],
      percentages: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    swapTokensForBNB(
      dexRouter: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapTokensForUSD(
      dexRouter: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      usd: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapUSDForTokens(
      dexRouter: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      usd: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addLiquidity(
      dexRouter: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      ethAmount: PromiseOrValue<BigNumberish>,
      lpReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    autoLiquidity(
      dexRouter: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      lpReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPathForTokensToTokens(
      tokenAddressA: PromiseOrValue<string>,
      tokenAddressB: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendToTeam(
      tokenAddress: PromiseOrValue<string>,
      wallets: PromiseOrValue<string>[],
      percentages: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapTokensForBNB(
      dexRouter: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapTokensForUSD(
      dexRouter: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      usd: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapUSDForTokens(
      dexRouter: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      usd: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      dexRouter: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      ethAmount: PromiseOrValue<BigNumberish>,
      lpReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    autoLiquidity(
      dexRouter: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      lpReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPathForTokensToTokens(
      tokenAddressA: PromiseOrValue<string>,
      tokenAddressB: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendToTeam(
      tokenAddress: PromiseOrValue<string>,
      wallets: PromiseOrValue<string>[],
      percentages: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapTokensForBNB(
      dexRouter: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapTokensForUSD(
      dexRouter: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      usd: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapUSDForTokens(
      dexRouter: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      usd: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
