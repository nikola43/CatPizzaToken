/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  MetaStockUtils,
  MetaStockUtilsInterface,
} from "../../contracts/MetaStockUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IUniswapV2Router02",
        name: "dexRouter",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "ethAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "lpReceiver",
        type: "address",
      },
    ],
    name: "addLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IUniswapV2Router02",
        name: "dexRouter",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "lpReceiver",
        type: "address",
      },
    ],
    name: "autoLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddressA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenAddressB",
        type: "address",
      },
    ],
    name: "getPathForTokensToTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "wallets",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "percentages",
        type: "uint256[]",
      },
    ],
    name: "sendToTeam",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IUniswapV2Router02",
        name: "dexRouter",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenAmount",
        type: "uint256",
      },
    ],
    name: "swapTokensForBNB",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IUniswapV2Router02",
        name: "dexRouter",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "usd",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenAmount",
        type: "uint256",
      },
    ],
    name: "swapTokensForUSD",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IUniswapV2Router02",
        name: "dexRouter",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "usd",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenAmount",
        type: "uint256",
      },
    ],
    name: "swapUSDForTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610e97806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80634b2fc7bb1161005b5780634b2fc7bb146100d35780639b3c2ee5146100e6578063b8c1e580146100f9578063f72a84181461010c57600080fd5b806305158061146100825780632606222a146100975780633b4a4af4146100aa575b600080fd5b610095610090366004610963565b61011f565b005b6100956100a53660046109b4565b61031c565b6100bd6100b83660046109f5565b6104e1565b6040516100ca9190610a72565b60405180910390f35b6100956100e1366004610a8c565b61056e565b6100956100f4366004610aeb565b610697565b610095610107366004610963565b6106ea565b61009561011a366004610c14565b6107ea565b6040805160038082526080820190925260009160208201606080368337019050509050838160008151811061015657610156610cea565b60200260200101906001600160a01b031690816001600160a01b031681525050846001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d89190610d00565b816001815181106101eb576101eb610cea565b60200260200101906001600160a01b031690816001600160a01b031681525050828160028151811061021f5761021f610cea565b6001600160a01b03928316602091820292909201015260405163095ea7b360e01b8152868216600482015260001960248201529085169063095ea7b3906044016020604051808303816000875af115801561027e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a29190610d1d565b506001600160a01b038516635c11d79583600084886102c3426103e8610d55565b6040518663ffffffff1660e01b81526004016102e3959493929190610d6d565b600060405180830381600087803b1580156102fd57600080fd5b505af1158015610311573d6000803e3d6000fd5b505050505050505050565b604080516002808252606082018352600092602083019080368337019050509050828160008151811061035157610351610cea565b60200260200101906001600160a01b031690816001600160a01b031681525050836001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d39190610d00565b816001815181106103e6576103e6610cea565b6001600160a01b03928316602091820292909201015260405163095ea7b360e01b81528582166004820152602481018490529084169063095ea7b3906044016020604051808303816000875af1158015610444573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104689190610d1d565b506001600160a01b03841663791ac9478360008487610489426103e8610d55565b6040518663ffffffff1660e01b81526004016104a9959493929190610d6d565b600060405180830381600087803b1580156104c357600080fd5b505af11580156104d7573d6000803e3d6000fd5b5050505050505050565b60408051600280825260608083018452926000929190602083019080368337019050509050838160008151811061051a5761051a610cea565b60200260200101906001600160a01b031690816001600160a01b031681525050828160018151811061054e5761054e610cea565b6001600160a01b0390921660209283029190910190910152905092915050565b60405163095ea7b360e01b81526001600160a01b038681166004830152600019602483015285169063095ea7b3906044016020604051808303816000875af11580156105be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e29190610d1d565b506001600160a01b03851663f305d7198386866000808761060542612710610d55565b60405160e089901b6001600160e01b03191681526001600160a01b039687166004820152602481019590955260448501939093526064840191909152909216608482015260a481019190915260c40160606040518083038185885af1158015610672573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906104d79190610da9565b60006106a4600284610dd7565b90506001600160a01b038416316106bc86868461031c565b60006106d2826001600160a01b03881631610df9565b90506106e1878785848861056e565b50505050505050565b6040805160038082526080820190925260009160208201606080368337019050509050828160008151811061072157610721610cea565b60200260200101906001600160a01b031690816001600160a01b031681525050846001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561077f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a39190610d00565b816001815181106107b6576107b6610cea565b60200260200101906001600160a01b031690816001600160a01b031681525050838160028151811061021f5761021f610cea565b6040516370a0823160e01b81526001600160a01b0384166004820181905261271091600091906370a0823190602401602060405180830381865afa158015610836573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085a9190610e10565b905060005b845181101561094357856001600160a01b031663a9059cbb86838151811061088957610889610cea565b6020026020010151858785815181106108a4576108a4610cea565b6020026020010151866108b79190610e29565b6108c19190610dd7565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af115801561090c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109309190610d1d565b508061093b81610e48565b91505061085f565b505050505050565b6001600160a01b038116811461096057600080fd5b50565b6000806000806080858703121561097957600080fd5b84356109848161094b565b935060208501356109948161094b565b925060408501356109a48161094b565b9396929550929360600135925050565b6000806000606084860312156109c957600080fd5b83356109d48161094b565b925060208401356109e48161094b565b929592945050506040919091013590565b60008060408385031215610a0857600080fd5b8235610a138161094b565b91506020830135610a238161094b565b809150509250929050565b600081518084526020808501945080840160005b83811015610a675781516001600160a01b031687529582019590820190600101610a42565b509495945050505050565b602081526000610a856020830184610a2e565b9392505050565b600080600080600060a08688031215610aa457600080fd5b8535610aaf8161094b565b94506020860135610abf8161094b565b935060408601359250606086013591506080860135610add8161094b565b809150509295509295909350565b60008060008060808587031215610b0157600080fd5b8435610b0c8161094b565b93506020850135610b1c8161094b565b9250604085013591506060850135610b338161094b565b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610b7d57610b7d610b3e565b604052919050565b600067ffffffffffffffff821115610b9f57610b9f610b3e565b5060051b60200190565b600082601f830112610bba57600080fd5b81356020610bcf610bca83610b85565b610b54565b82815260059290921b84018101918181019086841115610bee57600080fd5b8286015b84811015610c095780358352918301918301610bf2565b509695505050505050565b600080600060608486031215610c2957600080fd5b8335610c348161094b565b925060208481013567ffffffffffffffff80821115610c5257600080fd5b818701915087601f830112610c6657600080fd5b8135610c74610bca82610b85565b81815260059190911b8301840190848101908a831115610c9357600080fd5b938501935b82851015610cba578435610cab8161094b565b82529385019390850190610c98565b965050506040870135925080831115610cd257600080fd5b5050610ce086828701610ba9565b9150509250925092565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610d1257600080fd5b8151610a858161094b565b600060208284031215610d2f57600080fd5b81518015158114610a8557600080fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115610d6857610d68610d3f565b500190565b85815284602082015260a060408201526000610d8c60a0830186610a2e565b6001600160a01b0394909416606083015250608001529392505050565b600080600060608486031215610dbe57600080fd5b8351925060208401519150604084015190509250925092565b600082610df457634e487b7160e01b600052601260045260246000fd5b500490565b600082821015610e0b57610e0b610d3f565b500390565b600060208284031215610e2257600080fd5b5051919050565b6000816000190483118215151615610e4357610e43610d3f565b500290565b600060018201610e5a57610e5a610d3f565b506001019056fea2646970667358221220742e5c8bf27fd51bdf491293f8f9836c3a608094dd7e74cf5ebb2df9a3ecdf7064736f6c634300080f0033";

type MetaStockUtilsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MetaStockUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MetaStockUtils__factory extends ContractFactory {
  constructor(...args: MetaStockUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MetaStockUtils> {
    return super.deploy(overrides || {}) as Promise<MetaStockUtils>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MetaStockUtils {
    return super.attach(address) as MetaStockUtils;
  }
  override connect(signer: Signer): MetaStockUtils__factory {
    return super.connect(signer) as MetaStockUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MetaStockUtilsInterface {
    return new utils.Interface(_abi) as MetaStockUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MetaStockUtils {
    return new Contract(address, _abi, signerOrProvider) as MetaStockUtils;
  }
}
