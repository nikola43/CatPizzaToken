/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  MetaStockUtils,
  MetaStockUtilsInterface,
} from "../../contracts/MetaStockUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IUniswapV2Router02",
        name: "dexRouter",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "ethAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "lpReceiver",
        type: "address",
      },
    ],
    name: "addLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IUniswapV2Router02",
        name: "dexRouter",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "lpReceiver",
        type: "address",
      },
    ],
    name: "autoLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddressA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenAddressB",
        type: "address",
      },
    ],
    name: "getPathForTokensToTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "wallets",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "percentages",
        type: "uint256[]",
      },
    ],
    name: "sendToTeam",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IUniswapV2Router02",
        name: "dexRouter",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenAmount",
        type: "uint256",
      },
    ],
    name: "swapTokensForBNB",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IUniswapV2Router02",
        name: "dexRouter",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "usd",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenAmount",
        type: "uint256",
      },
    ],
    name: "swapTokensForUSD",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IUniswapV2Router02",
        name: "dexRouter",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "usd",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenAmount",
        type: "uint256",
      },
    ],
    name: "swapUSDForTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610e8a806100206000396000f3fe608060405234801561001057600080fd5b506004361061006d5760003560e01c806305158061146100725780632606222a146100875780633b4a4af41461009a5780634b2fc7bb146100c35780639b3c2ee5146100d6578063b8c1e580146100e9578063f72a8418146100fc575b600080fd5b610085610080366004610940565b61010f565b005b610085610095366004610991565b61030b565b6100ad6100a83660046109d2565b6104ce565b6040516100ba9190610a4f565b60405180910390f35b6100856100d1366004610a69565b61055b565b6100856100e4366004610ac8565b610683565b6100856100f7366004610940565b6106d6565b61008561010a366004610bef565b6107d6565b6040805160038082526080820190925260009160208201606080368337019050509050838160008151811061014657610146610cc4565b60200260200101906001600160a01b031690816001600160a01b031681525050846001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c89190610cda565b816001815181106101db576101db610cc4565b60200260200101906001600160a01b031690816001600160a01b031681525050828160028151811061020f5761020f610cc4565b6001600160a01b03928316602091820292909201015260405163095ea7b360e01b81529085169063095ea7b39061024e90889060001990600401610cf7565b6020604051808303816000875af115801561026d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102919190610d10565b506001600160a01b038516635c11d79583600084886102b2426103e8610d48565b6040518663ffffffff1660e01b81526004016102d2959493929190610d60565b600060405180830381600087803b1580156102ec57600080fd5b505af1158015610300573d6000803e3d6000fd5b505050505050505050565b604080516002808252606082018352600092602083019080368337019050509050828160008151811061034057610340610cc4565b60200260200101906001600160a01b031690816001600160a01b031681525050836001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561039e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c29190610cda565b816001815181106103d5576103d5610cc4565b6001600160a01b03928316602091820292909201015260405163095ea7b360e01b81529084169063095ea7b3906104129087908690600401610cf7565b6020604051808303816000875af1158015610431573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104559190610d10565b506001600160a01b03841663791ac9478360008487610476426103e8610d48565b6040518663ffffffff1660e01b8152600401610496959493929190610d60565b600060405180830381600087803b1580156104b057600080fd5b505af11580156104c4573d6000803e3d6000fd5b5050505050505050565b60408051600280825260608083018452926000929190602083019080368337019050509050838160008151811061050757610507610cc4565b60200260200101906001600160a01b031690816001600160a01b031681525050828160018151811061053b5761053b610cc4565b6001600160a01b0390921660209283029190910190910152905092915050565b60405163095ea7b360e01b81526001600160a01b0385169063095ea7b39061058b90889060001990600401610cf7565b6020604051808303816000875af11580156105aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ce9190610d10565b506001600160a01b03851663f305d719838686600080876105f142612710610d48565b60405160e089901b6001600160e01b03191681526001600160a01b039687166004820152602481019590955260448501939093526064840191909152909216608482015260a481019190915260c40160606040518083038185885af115801561065e573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906104c49190610d9c565b6000610690600284610dca565b90506001600160a01b038416316106a886868461030b565b60006106be826001600160a01b03881631610dec565b90506106cd878785848861055b565b50505050505050565b6040805160038082526080820190925260009160208201606080368337019050509050828160008151811061070d5761070d610cc4565b60200260200101906001600160a01b031690816001600160a01b031681525050846001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561076b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078f9190610cda565b816001815181106107a2576107a2610cc4565b60200260200101906001600160a01b031690816001600160a01b031681525050838160028151811061020f5761020f610cc4565b6040516370a0823160e01b81526001600160a01b0384166004820181905261271091600091906370a0823190602401602060405180830381865afa158015610822573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108469190610e03565b905060005b845181101561092057856001600160a01b031663a9059cbb86838151811061087557610875610cc4565b60200260200101518587858151811061089057610890610cc4565b6020026020010151866108a39190610e1c565b6108ad9190610dca565b6040518363ffffffff1660e01b81526004016108ca929190610cf7565b6020604051808303816000875af11580156108e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090d9190610d10565b508061091881610e3b565b91505061084b565b505050505050565b6001600160a01b038116811461093d57600080fd5b50565b6000806000806080858703121561095657600080fd5b843561096181610928565b9350602085013561097181610928565b9250604085013561098181610928565b9396929550929360600135925050565b6000806000606084860312156109a657600080fd5b83356109b181610928565b925060208401356109c181610928565b929592945050506040919091013590565b600080604083850312156109e557600080fd5b82356109f081610928565b91506020830135610a0081610928565b809150509250929050565b600081518084526020808501945080840160005b83811015610a445781516001600160a01b031687529582019590820190600101610a1f565b509495945050505050565b602081526000610a626020830184610a0b565b9392505050565b600080600080600060a08688031215610a8157600080fd5b8535610a8c81610928565b94506020860135610a9c81610928565b935060408601359250606086013591506080860135610aba81610928565b809150509295509295909350565b60008060008060808587031215610ade57600080fd5b8435610ae981610928565b93506020850135610af981610928565b9250604085013591506060850135610b1081610928565b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715610b5957610b59610b1b565b604052919050565b60006001600160401b03821115610b7a57610b7a610b1b565b5060051b60200190565b600082601f830112610b9557600080fd5b81356020610baa610ba583610b61565b610b31565b82815260059290921b84018101918181019086841115610bc957600080fd5b8286015b84811015610be45780358352918301918301610bcd565b509695505050505050565b600080600060608486031215610c0457600080fd5b8335610c0f81610928565b92506020848101356001600160401b0380821115610c2c57600080fd5b818701915087601f830112610c4057600080fd5b8135610c4e610ba582610b61565b81815260059190911b8301840190848101908a831115610c6d57600080fd5b938501935b82851015610c94578435610c8581610928565b82529385019390850190610c72565b965050506040870135925080831115610cac57600080fd5b5050610cba86828701610b84565b9150509250925092565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610cec57600080fd5b8151610a6281610928565b6001600160a01b03929092168252602082015260400190565b600060208284031215610d2257600080fd5b81518015158114610a6257600080fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115610d5b57610d5b610d32565b500190565b85815284602082015260a060408201526000610d7f60a0830186610a0b565b6001600160a01b0394909416606083015250608001529392505050565b600080600060608486031215610db157600080fd5b8351925060208401519150604084015190509250925092565b600082610de757634e487b7160e01b600052601260045260246000fd5b500490565b600082821015610dfe57610dfe610d32565b500390565b600060208284031215610e1557600080fd5b5051919050565b6000816000190483118215151615610e3657610e36610d32565b500290565b600060018201610e4d57610e4d610d32565b506001019056fea26469706673582212207fa668bf28e580b8b3184818928d52243d41a09843a47ee5859a0caad9d7377c64736f6c634300080f0033";

type MetaStockUtilsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MetaStockUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MetaStockUtils__factory extends ContractFactory {
  constructor(...args: MetaStockUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MetaStockUtils> {
    return super.deploy(overrides || {}) as Promise<MetaStockUtils>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MetaStockUtils {
    return super.attach(address) as MetaStockUtils;
  }
  override connect(signer: Signer): MetaStockUtils__factory {
    return super.connect(signer) as MetaStockUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MetaStockUtilsInterface {
    return new utils.Interface(_abi) as MetaStockUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MetaStockUtils {
    return new Contract(address, _abi, signerOrProvider) as MetaStockUtils;
  }
}
