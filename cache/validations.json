{
  "version": "3.2",
  "log": [
    {
      "Context": {
        "src": "contracts/TestToken.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "DividendPayingToken": {
        "src": "contracts/TestToken.sol:1386",
        "version": {
          "withMetadata": "179a8f04067882c8a2b027c8cb5c4c631064d77d94969390e40553ef8dd31100",
          "withoutMetadata": "25655da96eace5197b77bce2e92c02d5fb6674f5f64bbed5aae868cd055a2fa2",
          "linkedWithoutMetadata": "25655da96eace5197b77bce2e92c02d5fb6674f5f64bbed5aae868cd055a2fa2"
        },
        "inherit": [
          "IDividendPayingTokenOptional",
          "IDividendPayingToken",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathUint",
          "SafeMathInt"
        ],
        "methods": [
          "(string,string)",
          "()",
          "distributeDividends()",
          "distributeBusdDividends(uint256)",
          "withdrawDividend()",
          "dividendOf(address)",
          "withdrawableDividendOf(address)",
          "withdrawnDividendOf(address)",
          "accumulativeDividendOf(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DividendPayingToken",
            "src": "contracts/TestToken.sol:1422"
          },
          {
            "kind": "state-variable-assignment",
            "name": "BUSD",
            "src": "contracts/TestToken.sol:1403"
          },
          {
            "kind": "state-variable-immutable",
            "name": "BUSD",
            "src": "contracts/TestToken.sol:1403"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:785"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:787"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:789"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:791"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:792"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:793"
            },
            {
              "label": "magnifiedDividendPerShare",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1400"
            },
            {
              "label": "lastAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1401"
            },
            {
              "label": "magnifiedDividendCorrections",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_int256)",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1417"
            },
            {
              "label": "withdrawnDividends",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1418"
            },
            {
              "label": "totalDividendsDistributed",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1420"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20": {
        "src": "contracts/TestToken.sol:782",
        "version": {
          "withMetadata": "27733d57137efe065d6803f501e2d6a3ef1560861107431bcdb9e061fad26ebf",
          "withoutMetadata": "ee297ca6fa7f054b4a047d434439ade6f00649e758ca9d1bee49ab036367634c",
          "linkedWithoutMetadata": "ee297ca6fa7f054b4a047d434439ade6f00649e758ca9d1bee49ab036367634c"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts/TestToken.sol:804"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:785"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:787"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:789"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:791"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:792"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:793"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IDividendPayingToken": {
        "src": "contracts/TestToken.sol:663",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dividendOf(address)",
          "distributeDividends()",
          "withdrawDividend()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IDividendPayingTokenOptional": {
        "src": "contracts/TestToken.sol:630",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawableDividendOf(address)",
          "withdrawnDividendOf(address)",
          "accumulativeDividendOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts/TestToken.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/TestToken.sol:332",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/TestToken.sol:365",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/TestToken.sol:120",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/TestToken.sol:282",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IterableMapping": {
        "src": "contracts/TestToken.sol:478",
        "version": {
          "withMetadata": "4a2b8532b2f09c6ed6e76370bc7881e098292a66ee036f11e14bb24bbc30ad54",
          "withoutMetadata": "614397b5f0b08d2006ebdbb717b87002c1b471904164fa1618d8b77f678a056e",
          "linkedWithoutMetadata": "614397b5f0b08d2006ebdbb717b87002c1b471904164fa1618d8b77f678a056e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "get(IterableMapping.Map storage,address)",
          "getIndexOfKey(IterableMapping.Map storage,address)",
          "getKeyAtIndex(IterableMapping.Map storage,uint256)",
          "size(IterableMapping.Map storage)",
          "set(IterableMapping.Map storage,address,uint256)",
          "remove(IterableMapping.Map storage,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "contracts/TestToken.sol:566",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/TestToken.sol:577"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/TestToken.sol:567"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SafeMath": {
        "src": "contracts/TestToken.sol:1145",
        "version": {
          "withMetadata": "e28587c3485d4bf9fadaeed2e222ea58217563551785fdba12886d5de21862c4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMathInt": {
        "src": "contracts/TestToken.sol:700",
        "version": {
          "withMetadata": "4a66085680ceb94dc04856215a3193b05ee686c5562e2a930c982831ab6681fd",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMathUint": {
        "src": "contracts/TestToken.sol:744",
        "version": {
          "withMetadata": "b4fd0654537d1050ed4d70ad701f0de401a9f436e0da967231b720ba3495a1ff",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TestToken": {
        "src": "contracts/TestToken.sol:1617",
        "version": {
          "withMetadata": "496d99c38d7752fd3e19a868632f0145a5d726f5deec71687869c01ef66137ad",
          "withoutMetadata": "b5a50e618726cac7d17b2e5e02e937050afd4c37f0ae534d6c4b80cf9b885b13",
          "linkedWithoutMetadata": "b5a50e618726cac7d17b2e5e02e937050afd4c37f0ae534d6c4b80cf9b885b13"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "()",
          "()",
          "setBUSDRewardsFeeBuy(uint256)",
          "setDevFeeBuy(uint256)",
          "setMarketingFeeBuy(uint256)",
          "setBUSDRewardsFeesSell(uint256)",
          "setDevFeeSell(uint256)",
          "setMarketingFeeSell(uint256)",
          "setBurnFee(uint256)",
          "updateDividendTracker(address)",
          "updateUniswapV2Router(address)",
          "excludeFromFees(address,bool)",
          "excludeMultipleAccountsFromFees(address[],bool)",
          "setAutomatedMarketMakerPair(address,bool)",
          "updateDevWallet(address)",
          "updateGasForProcessing(uint256)",
          "updateClaimWait(uint256)",
          "getClaimWait()",
          "getTotalDividendsDistributed()",
          "SetmaxSellTransactionAmount(uint256)",
          "setswapTokensAtAmount(uint256)",
          "isExcludedFromFees(address)",
          "withdrawableDividendOf(address)",
          "dividendTokenBalanceOf(address)",
          "getAccountDividendsInfo(address)",
          "getAccountDividendsInfoAtIndex(uint256)",
          "processDividendTracker(uint256)",
          "claim()",
          "getLastProcessedIndex()",
          "getNumberOfDividendTokenHolders()",
          "getTradingIsEnabled()"
        ],
        "linkReferences": [
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 20261,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 20477,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 20667,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 21777,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 21885,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 22639,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          }
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestToken",
            "src": "contracts/TestToken.sol:1718"
          },
          {
            "kind": "state-variable-immutable",
            "name": "uniswapV2Pair",
            "src": "contracts/TestToken.sol:1621"
          },
          {
            "kind": "state-variable-assignment",
            "name": "BUSD",
            "src": "contracts/TestToken.sol:1623"
          },
          {
            "kind": "state-variable-immutable",
            "name": "BUSD",
            "src": "contracts/TestToken.sol:1623"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MarketingWallet",
            "src": "contracts/TestToken.sol:1625"
          },
          {
            "kind": "state-variable-assignment",
            "name": "BurnAddress",
            "src": "contracts/TestToken.sol:1626"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MarketingWalletReserve",
            "src": "contracts/TestToken.sol:1633"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DevWalletReserve",
            "src": "contracts/TestToken.sol:1634"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxSellTransactionAmount",
            "src": "contracts/TestToken.sol:1636"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_swapTokensAtAmount",
            "src": "contracts/TestToken.sol:1637"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxTxAmount",
            "src": "contracts/TestToken.sol:1638"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxWalletAmount",
            "src": "contracts/TestToken.sol:1639"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MarketingFeeSell",
            "src": "contracts/TestToken.sol:1645"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MarketingFeeBuy",
            "src": "contracts/TestToken.sol:1646"
          },
          {
            "kind": "state-variable-assignment",
            "name": "BurnFee",
            "src": "contracts/TestToken.sol:1647"
          },
          {
            "kind": "state-variable-immutable",
            "name": "totalFees",
            "src": "contracts/TestToken.sol:1648"
          },
          {
            "kind": "state-variable-assignment",
            "name": "sellFeeIncreaseFactor",
            "src": "contracts/TestToken.sol:1651"
          },
          {
            "kind": "state-variable-immutable",
            "name": "sellFeeIncreaseFactor",
            "src": "contracts/TestToken.sol:1651"
          },
          {
            "kind": "state-variable-assignment",
            "name": "gasForProcessing",
            "src": "contracts/TestToken.sol:1654"
          },
          {
            "kind": "state-variable-assignment",
            "name": "tradingEnabledTimestamp",
            "src": "contracts/TestToken.sol:1657"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tradingEnabledTimestamp",
            "src": "contracts/TestToken.sol:1657"
          },
          {
            "kind": "external-library-linking",
            "name": "IterableMapping",
            "src": "contracts/TestToken.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:785"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:787"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:789"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:791"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:792"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:793"
            },
            {
              "label": "_owner",
              "offset": 1,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/TestToken.sol:567"
            },
            {
              "label": "uniswapV2Router",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IUniswapV2Router02)496",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1620"
            },
            {
              "label": "MarketingWallet",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1625"
            },
            {
              "label": "BurnAddress",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1626"
            },
            {
              "label": "swapping",
              "offset": 20,
              "slot": "8",
              "type": "t_bool",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1627"
            },
            {
              "label": "dividendTracker",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(TestTokenDividendTracker)5050",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1629"
            },
            {
              "label": "DevWallet",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1631"
            },
            {
              "label": "MarketingWalletReserve",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1633"
            },
            {
              "label": "DevWalletReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1634"
            },
            {
              "label": "_maxSellTransactionAmount",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1636"
            },
            {
              "label": "_swapTokensAtAmount",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1637"
            },
            {
              "label": "_maxTxAmount",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1638"
            },
            {
              "label": "_maxWalletAmount",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1639"
            },
            {
              "label": "BUSDRewardsFeeBuy",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1641"
            },
            {
              "label": "BUSDRewardsFeeSell",
              "offset": 0,
              "slot": "18",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1642"
            },
            {
              "label": "DevFeeBuy",
              "offset": 0,
              "slot": "19",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1643"
            },
            {
              "label": "DevFeeSell",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1644"
            },
            {
              "label": "MarketingFeeSell",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1645"
            },
            {
              "label": "MarketingFeeBuy",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1646"
            },
            {
              "label": "BurnFee",
              "offset": 0,
              "slot": "23",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1647"
            },
            {
              "label": "gasForProcessing",
              "offset": 0,
              "slot": "24",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1654"
            },
            {
              "label": "_isExcludedFromFees",
              "offset": 0,
              "slot": "25",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1660"
            },
            {
              "label": "canTransferBeforeTradingIsEnabled",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1663"
            },
            {
              "label": "automatedMarketMakerPairs",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1667"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IUniswapV2Router02)496": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_contract(TestTokenDividendTracker)5050": {
              "label": "contract TestTokenDividendTracker",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestTokenDividendTracker": {
        "src": "contracts/TestToken.sol:2251",
        "version": {
          "withMetadata": "5df9b63e4903a5251b109e2e1962361478909da9652a70f06658b1a573d71716",
          "withoutMetadata": "99afcb3423dbe26baf24eb41d0cfb00ac6c24c7a5d12c5b8ce85104b24cacf61",
          "linkedWithoutMetadata": "99afcb3423dbe26baf24eb41d0cfb00ac6c24c7a5d12c5b8ce85104b24cacf61"
        },
        "inherit": [
          "Ownable",
          "DividendPayingToken",
          "IDividendPayingTokenOptional",
          "IDividendPayingToken",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt",
          "IterableMapping"
        ],
        "methods": [
          "()",
          "withdrawDividend()",
          "excludeFromDividends(address)",
          "updateClaimWait(uint256)",
          "getLastProcessedIndex()",
          "getNumberOfTokenHolders()",
          "getAccount(address)",
          "getAccountAtIndex(uint256)",
          "setBalance(address payable,uint256)",
          "process(uint256)",
          "processAccount(address payable,bool)"
        ],
        "linkReferences": [
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 3081,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 3297,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 3487,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 4597,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 4705,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 5459,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          }
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestTokenDividendTracker",
            "src": "contracts/TestToken.sol:2275"
          },
          {
            "kind": "state-variable-immutable",
            "name": "minimumTokenBalanceForDividends",
            "src": "contracts/TestToken.sol:2264"
          },
          {
            "kind": "external-library-linking",
            "name": "IterableMapping",
            "src": "contracts/TestToken.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:785"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:787"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:789"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:791"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:792"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:793"
            },
            {
              "label": "magnifiedDividendPerShare",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1400"
            },
            {
              "label": "lastAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1401"
            },
            {
              "label": "magnifiedDividendCorrections",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_int256)",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1417"
            },
            {
              "label": "withdrawnDividends",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1418"
            },
            {
              "label": "totalDividendsDistributed",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1420"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/TestToken.sol:567"
            },
            {
              "label": "tokenHoldersMap",
              "offset": 0,
              "slot": "12",
              "type": "t_struct(Map)816_storage",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2256"
            },
            {
              "label": "lastProcessedIndex",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2257"
            },
            {
              "label": "excludedFromDividends",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2259"
            },
            {
              "label": "lastClaimTimes",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2261"
            },
            {
              "label": "claimWait",
              "offset": 0,
              "slot": "19",
              "type": "t_uint256",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2263"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Map)816_storage": {
              "label": "struct IterableMapping.Map",
              "members": [
                {
                  "label": "keys",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "values",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "indexOf",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "inserted",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "cd6d171e61bb261b98605a1e203c6b46b7d5b5cf9ee8cb2a885820c5f6f02fc8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "Context": {
        "src": "contracts/TestToken.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "DividendPayingToken": {
        "src": "contracts/TestToken.sol:1386",
        "version": {
          "withMetadata": "a5bd09ad1660a3af8e4bcb9074b30e39394da654dba21af7c0049187f669c422",
          "withoutMetadata": "25655da96eace5197b77bce2e92c02d5fb6674f5f64bbed5aae868cd055a2fa2",
          "linkedWithoutMetadata": "25655da96eace5197b77bce2e92c02d5fb6674f5f64bbed5aae868cd055a2fa2"
        },
        "inherit": [
          "IDividendPayingTokenOptional",
          "IDividendPayingToken",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathUint",
          "SafeMathInt"
        ],
        "methods": [
          "(string,string)",
          "()",
          "distributeDividends()",
          "distributeBusdDividends(uint256)",
          "withdrawDividend()",
          "dividendOf(address)",
          "withdrawableDividendOf(address)",
          "withdrawnDividendOf(address)",
          "accumulativeDividendOf(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DividendPayingToken",
            "src": "contracts/TestToken.sol:1422"
          },
          {
            "kind": "state-variable-assignment",
            "name": "BUSD",
            "src": "contracts/TestToken.sol:1403"
          },
          {
            "kind": "state-variable-immutable",
            "name": "BUSD",
            "src": "contracts/TestToken.sol:1403"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:785"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:787"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:789"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:791"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:792"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:793"
            },
            {
              "label": "magnifiedDividendPerShare",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1400"
            },
            {
              "label": "lastAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1401"
            },
            {
              "label": "magnifiedDividendCorrections",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_int256)",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1417"
            },
            {
              "label": "withdrawnDividends",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1418"
            },
            {
              "label": "totalDividendsDistributed",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1420"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20": {
        "src": "contracts/TestToken.sol:782",
        "version": {
          "withMetadata": "da2b9fd5feef7b3534c3a6b292e95c7902ef53a3008b9ec633c9f9b3340af1c6",
          "withoutMetadata": "ee297ca6fa7f054b4a047d434439ade6f00649e758ca9d1bee49ab036367634c",
          "linkedWithoutMetadata": "ee297ca6fa7f054b4a047d434439ade6f00649e758ca9d1bee49ab036367634c"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts/TestToken.sol:804"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:785"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:787"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:789"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:791"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:792"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:793"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IDividendPayingToken": {
        "src": "contracts/TestToken.sol:663",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dividendOf(address)",
          "distributeDividends()",
          "withdrawDividend()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IDividendPayingTokenOptional": {
        "src": "contracts/TestToken.sol:630",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawableDividendOf(address)",
          "withdrawnDividendOf(address)",
          "accumulativeDividendOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts/TestToken.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/TestToken.sol:332",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/TestToken.sol:365",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/TestToken.sol:120",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/TestToken.sol:282",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IterableMapping": {
        "src": "contracts/TestToken.sol:478",
        "version": {
          "withMetadata": "224a854ce1fe810bb229f2e74b8d175114b8d6ade040ebb5000d1ce3951cb0df",
          "withoutMetadata": "614397b5f0b08d2006ebdbb717b87002c1b471904164fa1618d8b77f678a056e",
          "linkedWithoutMetadata": "614397b5f0b08d2006ebdbb717b87002c1b471904164fa1618d8b77f678a056e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "get(IterableMapping.Map storage,address)",
          "getIndexOfKey(IterableMapping.Map storage,address)",
          "getKeyAtIndex(IterableMapping.Map storage,uint256)",
          "size(IterableMapping.Map storage)",
          "set(IterableMapping.Map storage,address,uint256)",
          "remove(IterableMapping.Map storage,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "contracts/TestToken.sol:566",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/TestToken.sol:577"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/TestToken.sol:567"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SafeMath": {
        "src": "contracts/TestToken.sol:1145",
        "version": {
          "withMetadata": "a5ba0789f833131d58725bffcca160dfaef939203e4afa301237c29fdd376eeb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMathInt": {
        "src": "contracts/TestToken.sol:700",
        "version": {
          "withMetadata": "40334a3c05653d9fefb1bd8ea42a33c7a12344e278500da606134f9b3f0f1e13",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMathUint": {
        "src": "contracts/TestToken.sol:744",
        "version": {
          "withMetadata": "2bc775ca7ec80593b0304b796b43de88f55e9a1d6769e80aadc8a26271880252",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TestToken": {
        "src": "contracts/TestToken.sol:1617",
        "version": {
          "withMetadata": "165850cc9102da9508d7cd85c833bbc785e084819f25ba08695e2094cc6356b3",
          "withoutMetadata": "704f4abbb860503bcd04a395467972125a346649f0e80317b97a96cabfd0dac1",
          "linkedWithoutMetadata": "704f4abbb860503bcd04a395467972125a346649f0e80317b97a96cabfd0dac1"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "()",
          "()",
          "setBUSDRewardsFeeBuy(uint256)",
          "setDevFeeBuy(uint256)",
          "setMarketingFeeBuy(uint256)",
          "setBUSDRewardsFeesSell(uint256)",
          "setDevFeeSell(uint256)",
          "setMarketingFeeSell(uint256)",
          "setBurnFee(uint256)",
          "updateDividendTracker(address)",
          "updateUniswapV2Router(address)",
          "excludeFromFees(address,bool)",
          "excludeMultipleAccountsFromFees(address[],bool)",
          "setAutomatedMarketMakerPair(address,bool)",
          "updateDevWallet(address)",
          "updateGasForProcessing(uint256)",
          "updateClaimWait(uint256)",
          "getClaimWait()",
          "getTotalDividendsDistributed()",
          "SetmaxSellTransactionAmount(uint256)",
          "setswapTokensAtAmount(uint256)",
          "isExcludedFromFees(address)",
          "withdrawableDividendOf(address)",
          "dividendTokenBalanceOf(address)",
          "getAccountDividendsInfo(address)",
          "getAccountDividendsInfoAtIndex(uint256)",
          "processDividendTracker(uint256)",
          "claim()",
          "getLastProcessedIndex()",
          "getNumberOfDividendTokenHolders()",
          "getTradingIsEnabled()"
        ],
        "linkReferences": [
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 20241,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 20457,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 20647,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 21757,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 21865,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 22619,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          }
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestToken",
            "src": "contracts/TestToken.sol:1718"
          },
          {
            "kind": "state-variable-immutable",
            "name": "uniswapV2Pair",
            "src": "contracts/TestToken.sol:1621"
          },
          {
            "kind": "state-variable-assignment",
            "name": "BUSD",
            "src": "contracts/TestToken.sol:1623"
          },
          {
            "kind": "state-variable-immutable",
            "name": "BUSD",
            "src": "contracts/TestToken.sol:1623"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MarketingWallet",
            "src": "contracts/TestToken.sol:1625"
          },
          {
            "kind": "state-variable-assignment",
            "name": "BurnAddress",
            "src": "contracts/TestToken.sol:1626"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MarketingWalletReserve",
            "src": "contracts/TestToken.sol:1633"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DevWalletReserve",
            "src": "contracts/TestToken.sol:1634"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxSellTransactionAmount",
            "src": "contracts/TestToken.sol:1636"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_swapTokensAtAmount",
            "src": "contracts/TestToken.sol:1637"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxTxAmount",
            "src": "contracts/TestToken.sol:1638"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxWalletAmount",
            "src": "contracts/TestToken.sol:1639"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MarketingFeeSell",
            "src": "contracts/TestToken.sol:1645"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MarketingFeeBuy",
            "src": "contracts/TestToken.sol:1646"
          },
          {
            "kind": "state-variable-assignment",
            "name": "BurnFee",
            "src": "contracts/TestToken.sol:1647"
          },
          {
            "kind": "state-variable-immutable",
            "name": "totalFees",
            "src": "contracts/TestToken.sol:1648"
          },
          {
            "kind": "state-variable-assignment",
            "name": "sellFeeIncreaseFactor",
            "src": "contracts/TestToken.sol:1651"
          },
          {
            "kind": "state-variable-immutable",
            "name": "sellFeeIncreaseFactor",
            "src": "contracts/TestToken.sol:1651"
          },
          {
            "kind": "state-variable-assignment",
            "name": "gasForProcessing",
            "src": "contracts/TestToken.sol:1654"
          },
          {
            "kind": "state-variable-assignment",
            "name": "tradingEnabledTimestamp",
            "src": "contracts/TestToken.sol:1657"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tradingEnabledTimestamp",
            "src": "contracts/TestToken.sol:1657"
          },
          {
            "kind": "external-library-linking",
            "name": "IterableMapping",
            "src": "contracts/TestToken.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:785"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:787"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:789"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:791"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:792"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:793"
            },
            {
              "label": "_owner",
              "offset": 1,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/TestToken.sol:567"
            },
            {
              "label": "uniswapV2Router",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IUniswapV2Router02)496",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1620"
            },
            {
              "label": "MarketingWallet",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1625"
            },
            {
              "label": "BurnAddress",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1626"
            },
            {
              "label": "swapping",
              "offset": 20,
              "slot": "8",
              "type": "t_bool",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1627"
            },
            {
              "label": "dividendTracker",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(TestTokenDividendTracker)5046",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1629"
            },
            {
              "label": "DevWallet",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1631"
            },
            {
              "label": "MarketingWalletReserve",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1633"
            },
            {
              "label": "DevWalletReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1634"
            },
            {
              "label": "_maxSellTransactionAmount",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1636"
            },
            {
              "label": "_swapTokensAtAmount",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1637"
            },
            {
              "label": "_maxTxAmount",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1638"
            },
            {
              "label": "_maxWalletAmount",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1639"
            },
            {
              "label": "BUSDRewardsFeeBuy",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1641"
            },
            {
              "label": "BUSDRewardsFeeSell",
              "offset": 0,
              "slot": "18",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1642"
            },
            {
              "label": "DevFeeBuy",
              "offset": 0,
              "slot": "19",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1643"
            },
            {
              "label": "DevFeeSell",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1644"
            },
            {
              "label": "MarketingFeeSell",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1645"
            },
            {
              "label": "MarketingFeeBuy",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1646"
            },
            {
              "label": "BurnFee",
              "offset": 0,
              "slot": "23",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1647"
            },
            {
              "label": "gasForProcessing",
              "offset": 0,
              "slot": "24",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1654"
            },
            {
              "label": "_isExcludedFromFees",
              "offset": 0,
              "slot": "25",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1660"
            },
            {
              "label": "canTransferBeforeTradingIsEnabled",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1663"
            },
            {
              "label": "automatedMarketMakerPairs",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1667"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IUniswapV2Router02)496": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_contract(TestTokenDividendTracker)5046": {
              "label": "contract TestTokenDividendTracker",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestTokenDividendTracker": {
        "src": "contracts/TestToken.sol:2251",
        "version": {
          "withMetadata": "34670b7a2cffb39d0558eed5b2c8b0a11f6858bb49a2fa2dd0d4ae77b1f8f9d0",
          "withoutMetadata": "99afcb3423dbe26baf24eb41d0cfb00ac6c24c7a5d12c5b8ce85104b24cacf61",
          "linkedWithoutMetadata": "99afcb3423dbe26baf24eb41d0cfb00ac6c24c7a5d12c5b8ce85104b24cacf61"
        },
        "inherit": [
          "Ownable",
          "DividendPayingToken",
          "IDividendPayingTokenOptional",
          "IDividendPayingToken",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt",
          "IterableMapping"
        ],
        "methods": [
          "()",
          "withdrawDividend()",
          "excludeFromDividends(address)",
          "updateClaimWait(uint256)",
          "getLastProcessedIndex()",
          "getNumberOfTokenHolders()",
          "getAccount(address)",
          "getAccountAtIndex(uint256)",
          "setBalance(address payable,uint256)",
          "process(uint256)",
          "processAccount(address payable,bool)"
        ],
        "linkReferences": [
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 3081,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 3297,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 3487,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 4597,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 4705,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 5459,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          }
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestTokenDividendTracker",
            "src": "contracts/TestToken.sol:2275"
          },
          {
            "kind": "state-variable-immutable",
            "name": "minimumTokenBalanceForDividends",
            "src": "contracts/TestToken.sol:2264"
          },
          {
            "kind": "external-library-linking",
            "name": "IterableMapping",
            "src": "contracts/TestToken.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:785"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:787"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:789"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:791"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:792"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:793"
            },
            {
              "label": "magnifiedDividendPerShare",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1400"
            },
            {
              "label": "lastAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1401"
            },
            {
              "label": "magnifiedDividendCorrections",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_int256)",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1417"
            },
            {
              "label": "withdrawnDividends",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1418"
            },
            {
              "label": "totalDividendsDistributed",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1420"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/TestToken.sol:567"
            },
            {
              "label": "tokenHoldersMap",
              "offset": 0,
              "slot": "12",
              "type": "t_struct(Map)816_storage",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2256"
            },
            {
              "label": "lastProcessedIndex",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2257"
            },
            {
              "label": "excludedFromDividends",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2259"
            },
            {
              "label": "lastClaimTimes",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2261"
            },
            {
              "label": "claimWait",
              "offset": 0,
              "slot": "19",
              "type": "t_uint256",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2263"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Map)816_storage": {
              "label": "struct IterableMapping.Map",
              "members": [
                {
                  "label": "keys",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "values",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "indexOf",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "inserted",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "cd6d171e61bb261b98605a1e203c6b46b7d5b5cf9ee8cb2a885820c5f6f02fc8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "Context": {
        "src": "contracts/TestToken.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "DividendPayingToken": {
        "src": "contracts/TestToken.sol:1386",
        "version": {
          "withMetadata": "e748aa14ca17a290bfbb06b092b7386922e20d91bbc482adf51e70bad5f745ed",
          "withoutMetadata": "25655da96eace5197b77bce2e92c02d5fb6674f5f64bbed5aae868cd055a2fa2",
          "linkedWithoutMetadata": "25655da96eace5197b77bce2e92c02d5fb6674f5f64bbed5aae868cd055a2fa2"
        },
        "inherit": [
          "IDividendPayingTokenOptional",
          "IDividendPayingToken",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathUint",
          "SafeMathInt"
        ],
        "methods": [
          "(string,string)",
          "()",
          "distributeDividends()",
          "distributeBusdDividends(uint256)",
          "withdrawDividend()",
          "dividendOf(address)",
          "withdrawableDividendOf(address)",
          "withdrawnDividendOf(address)",
          "accumulativeDividendOf(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DividendPayingToken",
            "src": "contracts/TestToken.sol:1422"
          },
          {
            "kind": "state-variable-assignment",
            "name": "BUSD",
            "src": "contracts/TestToken.sol:1403"
          },
          {
            "kind": "state-variable-immutable",
            "name": "BUSD",
            "src": "contracts/TestToken.sol:1403"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:785"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:787"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:789"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:791"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:792"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:793"
            },
            {
              "label": "magnifiedDividendPerShare",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1400"
            },
            {
              "label": "lastAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1401"
            },
            {
              "label": "magnifiedDividendCorrections",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_int256)",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1417"
            },
            {
              "label": "withdrawnDividends",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1418"
            },
            {
              "label": "totalDividendsDistributed",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1420"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20": {
        "src": "contracts/TestToken.sol:782",
        "version": {
          "withMetadata": "69fcc7231ace6929f80ffb87d23ef8fa6a9de12b5e3d9c2aab98f2e67eb0a829",
          "withoutMetadata": "ee297ca6fa7f054b4a047d434439ade6f00649e758ca9d1bee49ab036367634c",
          "linkedWithoutMetadata": "ee297ca6fa7f054b4a047d434439ade6f00649e758ca9d1bee49ab036367634c"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts/TestToken.sol:804"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:785"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:787"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:789"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:791"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:792"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:793"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IDividendPayingToken": {
        "src": "contracts/TestToken.sol:663",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dividendOf(address)",
          "distributeDividends()",
          "withdrawDividend()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IDividendPayingTokenOptional": {
        "src": "contracts/TestToken.sol:630",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawableDividendOf(address)",
          "withdrawnDividendOf(address)",
          "accumulativeDividendOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts/TestToken.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/TestToken.sol:332",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/TestToken.sol:365",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/TestToken.sol:120",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/TestToken.sol:282",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IterableMapping": {
        "src": "contracts/TestToken.sol:478",
        "version": {
          "withMetadata": "8f538a3bf6f4ef62ffcd3110306f2171fcbee08fa4884780202e16f892bd2566",
          "withoutMetadata": "614397b5f0b08d2006ebdbb717b87002c1b471904164fa1618d8b77f678a056e",
          "linkedWithoutMetadata": "614397b5f0b08d2006ebdbb717b87002c1b471904164fa1618d8b77f678a056e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "get(IterableMapping.Map storage,address)",
          "getIndexOfKey(IterableMapping.Map storage,address)",
          "getKeyAtIndex(IterableMapping.Map storage,uint256)",
          "size(IterableMapping.Map storage)",
          "set(IterableMapping.Map storage,address,uint256)",
          "remove(IterableMapping.Map storage,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "contracts/TestToken.sol:566",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/TestToken.sol:577"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/TestToken.sol:567"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SafeMath": {
        "src": "contracts/TestToken.sol:1145",
        "version": {
          "withMetadata": "bd3c860b58bc90479e7c7729ac05624c1677c5857877d5ef37c6e316e103d770",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMathInt": {
        "src": "contracts/TestToken.sol:700",
        "version": {
          "withMetadata": "c8cd99337a603afd8219b64f66359c9ac1461f57b4ba4ceeb08aa30c9aee371d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMathUint": {
        "src": "contracts/TestToken.sol:744",
        "version": {
          "withMetadata": "6994fc9284e1d64115e7ea2af8cb500aedc7f1026dcb73de9f159e7702afb641",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TestToken": {
        "src": "contracts/TestToken.sol:1617",
        "version": {
          "withMetadata": "2688be0621aba58b7fcf27068709a88b24196f2bedf689d6b000ddc89601c39a",
          "withoutMetadata": "c5faaf65d92fe9e74867fde9125e61f8c1a4e43b4fbad64291b89db374dedb30",
          "linkedWithoutMetadata": "c5faaf65d92fe9e74867fde9125e61f8c1a4e43b4fbad64291b89db374dedb30"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "()",
          "()",
          "setBUSDRewardsFeeBuy(uint256)",
          "setDevFeeBuy(uint256)",
          "setMarketingFeeBuy(uint256)",
          "setBUSDRewardsFeesSell(uint256)",
          "setDevFeeSell(uint256)",
          "setMarketingFeeSell(uint256)",
          "setBurnFee(uint256)",
          "updateDividendTracker(address)",
          "updateUniswapV2Router(address)",
          "excludeFromFees(address,bool)",
          "excludeMultipleAccountsFromFees(address[],bool)",
          "setAutomatedMarketMakerPair(address,bool)",
          "updateDevWallet(address)",
          "updateGasForProcessing(uint256)",
          "updateClaimWait(uint256)",
          "getClaimWait()",
          "getTotalDividendsDistributed()",
          "SetmaxSellTransactionAmount(uint256)",
          "setswapTokensAtAmount(uint256)",
          "isExcludedFromFees(address)",
          "withdrawableDividendOf(address)",
          "dividendTokenBalanceOf(address)",
          "getAccountDividendsInfo(address)",
          "getAccountDividendsInfoAtIndex(uint256)",
          "processDividendTracker(uint256)",
          "claim()",
          "getLastProcessedIndex()",
          "getNumberOfDividendTokenHolders()",
          "getTradingIsEnabled()"
        ],
        "linkReferences": [
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 20253,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 20469,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 20659,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 21769,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 21877,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 22631,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          }
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestToken",
            "src": "contracts/TestToken.sol:1718"
          },
          {
            "kind": "state-variable-immutable",
            "name": "uniswapV2Pair",
            "src": "contracts/TestToken.sol:1621"
          },
          {
            "kind": "state-variable-assignment",
            "name": "BUSD",
            "src": "contracts/TestToken.sol:1623"
          },
          {
            "kind": "state-variable-immutable",
            "name": "BUSD",
            "src": "contracts/TestToken.sol:1623"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MarketingWallet",
            "src": "contracts/TestToken.sol:1625"
          },
          {
            "kind": "state-variable-assignment",
            "name": "BurnAddress",
            "src": "contracts/TestToken.sol:1626"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MarketingWalletReserve",
            "src": "contracts/TestToken.sol:1633"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DevWalletReserve",
            "src": "contracts/TestToken.sol:1634"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxSellTransactionAmount",
            "src": "contracts/TestToken.sol:1636"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_swapTokensAtAmount",
            "src": "contracts/TestToken.sol:1637"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxTxAmount",
            "src": "contracts/TestToken.sol:1638"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxWalletAmount",
            "src": "contracts/TestToken.sol:1639"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MarketingFeeSell",
            "src": "contracts/TestToken.sol:1645"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MarketingFeeBuy",
            "src": "contracts/TestToken.sol:1646"
          },
          {
            "kind": "state-variable-assignment",
            "name": "BurnFee",
            "src": "contracts/TestToken.sol:1647"
          },
          {
            "kind": "state-variable-immutable",
            "name": "totalFees",
            "src": "contracts/TestToken.sol:1648"
          },
          {
            "kind": "state-variable-assignment",
            "name": "sellFeeIncreaseFactor",
            "src": "contracts/TestToken.sol:1651"
          },
          {
            "kind": "state-variable-immutable",
            "name": "sellFeeIncreaseFactor",
            "src": "contracts/TestToken.sol:1651"
          },
          {
            "kind": "state-variable-assignment",
            "name": "gasForProcessing",
            "src": "contracts/TestToken.sol:1654"
          },
          {
            "kind": "state-variable-assignment",
            "name": "tradingEnabledTimestamp",
            "src": "contracts/TestToken.sol:1657"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tradingEnabledTimestamp",
            "src": "contracts/TestToken.sol:1657"
          },
          {
            "kind": "external-library-linking",
            "name": "IterableMapping",
            "src": "contracts/TestToken.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:785"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:787"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:789"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:791"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:792"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:793"
            },
            {
              "label": "_owner",
              "offset": 1,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/TestToken.sol:567"
            },
            {
              "label": "uniswapV2Router",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IUniswapV2Router02)496",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1620"
            },
            {
              "label": "MarketingWallet",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1625"
            },
            {
              "label": "BurnAddress",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1626"
            },
            {
              "label": "swapping",
              "offset": 20,
              "slot": "8",
              "type": "t_bool",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1627"
            },
            {
              "label": "dividendTracker",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(TestTokenDividendTracker)5054",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1629"
            },
            {
              "label": "DevWallet",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1631"
            },
            {
              "label": "MarketingWalletReserve",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1633"
            },
            {
              "label": "DevWalletReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1634"
            },
            {
              "label": "_maxSellTransactionAmount",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1636"
            },
            {
              "label": "_swapTokensAtAmount",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1637"
            },
            {
              "label": "_maxTxAmount",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1638"
            },
            {
              "label": "_maxWalletAmount",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1639"
            },
            {
              "label": "BUSDRewardsFeeBuy",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1641"
            },
            {
              "label": "BUSDRewardsFeeSell",
              "offset": 0,
              "slot": "18",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1642"
            },
            {
              "label": "DevFeeBuy",
              "offset": 0,
              "slot": "19",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1643"
            },
            {
              "label": "DevFeeSell",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1644"
            },
            {
              "label": "MarketingFeeSell",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1645"
            },
            {
              "label": "MarketingFeeBuy",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1646"
            },
            {
              "label": "BurnFee",
              "offset": 0,
              "slot": "23",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1647"
            },
            {
              "label": "gasForProcessing",
              "offset": 0,
              "slot": "24",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1654"
            },
            {
              "label": "_isExcludedFromFees",
              "offset": 0,
              "slot": "25",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1660"
            },
            {
              "label": "canTransferBeforeTradingIsEnabled",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1663"
            },
            {
              "label": "automatedMarketMakerPairs",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1667"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IUniswapV2Router02)496": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_contract(TestTokenDividendTracker)5054": {
              "label": "contract TestTokenDividendTracker",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestTokenDividendTracker": {
        "src": "contracts/TestToken.sol:2251",
        "version": {
          "withMetadata": "0e1ea0eb0a89977b9b27d5d3865ba6200cdcdb069f29b0fa1d9bc9dd8c85acd2",
          "withoutMetadata": "99afcb3423dbe26baf24eb41d0cfb00ac6c24c7a5d12c5b8ce85104b24cacf61",
          "linkedWithoutMetadata": "99afcb3423dbe26baf24eb41d0cfb00ac6c24c7a5d12c5b8ce85104b24cacf61"
        },
        "inherit": [
          "Ownable",
          "DividendPayingToken",
          "IDividendPayingTokenOptional",
          "IDividendPayingToken",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt",
          "IterableMapping"
        ],
        "methods": [
          "()",
          "withdrawDividend()",
          "excludeFromDividends(address)",
          "updateClaimWait(uint256)",
          "getLastProcessedIndex()",
          "getNumberOfTokenHolders()",
          "getAccount(address)",
          "getAccountAtIndex(uint256)",
          "setBalance(address payable,uint256)",
          "process(uint256)",
          "processAccount(address payable,bool)"
        ],
        "linkReferences": [
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 3081,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 3297,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 3487,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 4597,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 4705,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 5459,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          }
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestTokenDividendTracker",
            "src": "contracts/TestToken.sol:2275"
          },
          {
            "kind": "state-variable-immutable",
            "name": "minimumTokenBalanceForDividends",
            "src": "contracts/TestToken.sol:2264"
          },
          {
            "kind": "external-library-linking",
            "name": "IterableMapping",
            "src": "contracts/TestToken.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:785"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:787"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:789"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:791"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:792"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:793"
            },
            {
              "label": "magnifiedDividendPerShare",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1400"
            },
            {
              "label": "lastAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1401"
            },
            {
              "label": "magnifiedDividendCorrections",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_int256)",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1417"
            },
            {
              "label": "withdrawnDividends",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1418"
            },
            {
              "label": "totalDividendsDistributed",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1420"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/TestToken.sol:567"
            },
            {
              "label": "tokenHoldersMap",
              "offset": 0,
              "slot": "12",
              "type": "t_struct(Map)816_storage",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2256"
            },
            {
              "label": "lastProcessedIndex",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2257"
            },
            {
              "label": "excludedFromDividends",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2259"
            },
            {
              "label": "lastClaimTimes",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2261"
            },
            {
              "label": "claimWait",
              "offset": 0,
              "slot": "19",
              "type": "t_uint256",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2263"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Map)816_storage": {
              "label": "struct IterableMapping.Map",
              "members": [
                {
                  "label": "keys",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "values",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "indexOf",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "inserted",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "cd6d171e61bb261b98605a1e203c6b46b7d5b5cf9ee8cb2a885820c5f6f02fc8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "Context": {
        "src": "contracts/TestToken.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "DividendPayingToken": {
        "src": "contracts/TestToken.sol:1386",
        "version": {
          "withMetadata": "e535c7c04aff1e41ca7c472342e4b5174ab987a57828e18a5f3a17d62b2ebb98",
          "withoutMetadata": "25655da96eace5197b77bce2e92c02d5fb6674f5f64bbed5aae868cd055a2fa2",
          "linkedWithoutMetadata": "25655da96eace5197b77bce2e92c02d5fb6674f5f64bbed5aae868cd055a2fa2"
        },
        "inherit": [
          "IDividendPayingTokenOptional",
          "IDividendPayingToken",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathUint",
          "SafeMathInt"
        ],
        "methods": [
          "(string,string)",
          "()",
          "distributeDividends()",
          "distributeBusdDividends(uint256)",
          "withdrawDividend()",
          "dividendOf(address)",
          "withdrawableDividendOf(address)",
          "withdrawnDividendOf(address)",
          "accumulativeDividendOf(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DividendPayingToken",
            "src": "contracts/TestToken.sol:1422"
          },
          {
            "kind": "state-variable-assignment",
            "name": "BUSD",
            "src": "contracts/TestToken.sol:1403"
          },
          {
            "kind": "state-variable-immutable",
            "name": "BUSD",
            "src": "contracts/TestToken.sol:1403"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:785"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:787"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:789"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:791"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:792"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:793"
            },
            {
              "label": "magnifiedDividendPerShare",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1400"
            },
            {
              "label": "lastAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1401"
            },
            {
              "label": "magnifiedDividendCorrections",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_int256)",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1417"
            },
            {
              "label": "withdrawnDividends",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1418"
            },
            {
              "label": "totalDividendsDistributed",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1420"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20": {
        "src": "contracts/TestToken.sol:782",
        "version": {
          "withMetadata": "b2b8f4b17a5d6cb22c881d23d10d48949877f85f2ea9a1926acbad84982fc63d",
          "withoutMetadata": "ee297ca6fa7f054b4a047d434439ade6f00649e758ca9d1bee49ab036367634c",
          "linkedWithoutMetadata": "ee297ca6fa7f054b4a047d434439ade6f00649e758ca9d1bee49ab036367634c"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts/TestToken.sol:804"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:785"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:787"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:789"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:791"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:792"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:793"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IDividendPayingToken": {
        "src": "contracts/TestToken.sol:663",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dividendOf(address)",
          "distributeDividends()",
          "withdrawDividend()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IDividendPayingTokenOptional": {
        "src": "contracts/TestToken.sol:630",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawableDividendOf(address)",
          "withdrawnDividendOf(address)",
          "accumulativeDividendOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts/TestToken.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/TestToken.sol:332",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/TestToken.sol:365",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/TestToken.sol:120",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/TestToken.sol:282",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IterableMapping": {
        "src": "contracts/TestToken.sol:478",
        "version": {
          "withMetadata": "c31abc0d5255ee462175754af26a2160f828276dacb57995db45c2c40d7c64f2",
          "withoutMetadata": "614397b5f0b08d2006ebdbb717b87002c1b471904164fa1618d8b77f678a056e",
          "linkedWithoutMetadata": "614397b5f0b08d2006ebdbb717b87002c1b471904164fa1618d8b77f678a056e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "get(IterableMapping.Map storage,address)",
          "getIndexOfKey(IterableMapping.Map storage,address)",
          "getKeyAtIndex(IterableMapping.Map storage,uint256)",
          "size(IterableMapping.Map storage)",
          "set(IterableMapping.Map storage,address,uint256)",
          "remove(IterableMapping.Map storage,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "contracts/TestToken.sol:566",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/TestToken.sol:577"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/TestToken.sol:567"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SafeMath": {
        "src": "contracts/TestToken.sol:1145",
        "version": {
          "withMetadata": "f574ab6331fbc06826586bb463febed828d151cb97dc1583558c1b6817d49aca",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMathInt": {
        "src": "contracts/TestToken.sol:700",
        "version": {
          "withMetadata": "74cb27437a855d7b632f513f28189b6eee95597df3a0b9018514a06713009762",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMathUint": {
        "src": "contracts/TestToken.sol:744",
        "version": {
          "withMetadata": "dd6e6f2be36a3a8043e58c305040f243ff22db68b36aebee40b47385e63d5763",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TestToken": {
        "src": "contracts/TestToken.sol:1617",
        "version": {
          "withMetadata": "d1eb2127a236c42cb60ea18ba7928a96bb6832ea882c87b9dec01bac0f8a4f7b",
          "withoutMetadata": "724b44cb48bfe920fa62ebd1fe8f2ed4ed2781b0da7c4cbaa6858fb2ad346638",
          "linkedWithoutMetadata": "724b44cb48bfe920fa62ebd1fe8f2ed4ed2781b0da7c4cbaa6858fb2ad346638"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "()",
          "()",
          "setBUSDRewardsFeeBuy(uint256)",
          "setDevFeeBuy(uint256)",
          "setMarketingFeeBuy(uint256)",
          "setBUSDRewardsFeesSell(uint256)",
          "setDevFeeSell(uint256)",
          "setMarketingFeeSell(uint256)",
          "setBurnFee(uint256)",
          "updateDividendTracker(address)",
          "updateUniswapV2Router(address)",
          "excludeFromFees(address,bool)",
          "excludeMultipleAccountsFromFees(address[],bool)",
          "setAutomatedMarketMakerPair(address,bool)",
          "updateDevWallet(address)",
          "updateGasForProcessing(uint256)",
          "updateClaimWait(uint256)",
          "getClaimWait()",
          "getTotalDividendsDistributed()",
          "SetmaxSellTransactionAmount(uint256)",
          "setswapTokensAtAmount(uint256)",
          "isExcludedFromFees(address)",
          "withdrawableDividendOf(address)",
          "dividendTokenBalanceOf(address)",
          "getAccountDividendsInfo(address)",
          "getAccountDividendsInfoAtIndex(uint256)",
          "processDividendTracker(uint256)",
          "claim()",
          "getLastProcessedIndex()",
          "getNumberOfDividendTokenHolders()",
          "getTradingIsEnabled()"
        ],
        "linkReferences": [
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 20216,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 20432,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 20622,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 21732,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 21840,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 22594,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          }
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestToken",
            "src": "contracts/TestToken.sol:1718"
          },
          {
            "kind": "state-variable-immutable",
            "name": "uniswapV2Pair",
            "src": "contracts/TestToken.sol:1621"
          },
          {
            "kind": "state-variable-assignment",
            "name": "BUSD",
            "src": "contracts/TestToken.sol:1623"
          },
          {
            "kind": "state-variable-immutable",
            "name": "BUSD",
            "src": "contracts/TestToken.sol:1623"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MarketingWallet",
            "src": "contracts/TestToken.sol:1625"
          },
          {
            "kind": "state-variable-assignment",
            "name": "BurnAddress",
            "src": "contracts/TestToken.sol:1626"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MarketingWalletReserve",
            "src": "contracts/TestToken.sol:1633"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DevWalletReserve",
            "src": "contracts/TestToken.sol:1634"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxSellTransactionAmount",
            "src": "contracts/TestToken.sol:1636"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_swapTokensAtAmount",
            "src": "contracts/TestToken.sol:1637"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxTxAmount",
            "src": "contracts/TestToken.sol:1638"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxWalletAmount",
            "src": "contracts/TestToken.sol:1639"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MarketingFeeSell",
            "src": "contracts/TestToken.sol:1645"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MarketingFeeBuy",
            "src": "contracts/TestToken.sol:1646"
          },
          {
            "kind": "state-variable-assignment",
            "name": "BurnFee",
            "src": "contracts/TestToken.sol:1647"
          },
          {
            "kind": "state-variable-immutable",
            "name": "totalFees",
            "src": "contracts/TestToken.sol:1648"
          },
          {
            "kind": "state-variable-assignment",
            "name": "sellFeeIncreaseFactor",
            "src": "contracts/TestToken.sol:1651"
          },
          {
            "kind": "state-variable-immutable",
            "name": "sellFeeIncreaseFactor",
            "src": "contracts/TestToken.sol:1651"
          },
          {
            "kind": "state-variable-assignment",
            "name": "gasForProcessing",
            "src": "contracts/TestToken.sol:1654"
          },
          {
            "kind": "state-variable-assignment",
            "name": "tradingEnabledTimestamp",
            "src": "contracts/TestToken.sol:1657"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tradingEnabledTimestamp",
            "src": "contracts/TestToken.sol:1657"
          },
          {
            "kind": "external-library-linking",
            "name": "IterableMapping",
            "src": "contracts/TestToken.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:785"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:787"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:789"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:791"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:792"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:793"
            },
            {
              "label": "_owner",
              "offset": 1,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/TestToken.sol:567"
            },
            {
              "label": "uniswapV2Router",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IUniswapV2Router02)496",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1620"
            },
            {
              "label": "MarketingWallet",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1625"
            },
            {
              "label": "BurnAddress",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1626"
            },
            {
              "label": "swapping",
              "offset": 20,
              "slot": "8",
              "type": "t_bool",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1627"
            },
            {
              "label": "dividendTracker",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(TestTokenDividendTracker)5049",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1629"
            },
            {
              "label": "DevWallet",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1631"
            },
            {
              "label": "MarketingWalletReserve",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1633"
            },
            {
              "label": "DevWalletReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1634"
            },
            {
              "label": "_maxSellTransactionAmount",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1636"
            },
            {
              "label": "_swapTokensAtAmount",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1637"
            },
            {
              "label": "_maxTxAmount",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1638"
            },
            {
              "label": "_maxWalletAmount",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1639"
            },
            {
              "label": "BUSDRewardsFeeBuy",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1641"
            },
            {
              "label": "BUSDRewardsFeeSell",
              "offset": 0,
              "slot": "18",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1642"
            },
            {
              "label": "DevFeeBuy",
              "offset": 0,
              "slot": "19",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1643"
            },
            {
              "label": "DevFeeSell",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1644"
            },
            {
              "label": "MarketingFeeSell",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1645"
            },
            {
              "label": "MarketingFeeBuy",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1646"
            },
            {
              "label": "BurnFee",
              "offset": 0,
              "slot": "23",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1647"
            },
            {
              "label": "gasForProcessing",
              "offset": 0,
              "slot": "24",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1654"
            },
            {
              "label": "_isExcludedFromFees",
              "offset": 0,
              "slot": "25",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1660"
            },
            {
              "label": "canTransferBeforeTradingIsEnabled",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1663"
            },
            {
              "label": "automatedMarketMakerPairs",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1667"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IUniswapV2Router02)496": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_contract(TestTokenDividendTracker)5049": {
              "label": "contract TestTokenDividendTracker",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestTokenDividendTracker": {
        "src": "contracts/TestToken.sol:2250",
        "version": {
          "withMetadata": "81f2511f30969e4dd26117789c42b8133da2bd5f4cb2e03070538b4a8429889d",
          "withoutMetadata": "99afcb3423dbe26baf24eb41d0cfb00ac6c24c7a5d12c5b8ce85104b24cacf61",
          "linkedWithoutMetadata": "99afcb3423dbe26baf24eb41d0cfb00ac6c24c7a5d12c5b8ce85104b24cacf61"
        },
        "inherit": [
          "Ownable",
          "DividendPayingToken",
          "IDividendPayingTokenOptional",
          "IDividendPayingToken",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt",
          "IterableMapping"
        ],
        "methods": [
          "()",
          "withdrawDividend()",
          "excludeFromDividends(address)",
          "updateClaimWait(uint256)",
          "getLastProcessedIndex()",
          "getNumberOfTokenHolders()",
          "getAccount(address)",
          "getAccountAtIndex(uint256)",
          "setBalance(address payable,uint256)",
          "process(uint256)",
          "processAccount(address payable,bool)"
        ],
        "linkReferences": [
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 3081,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 3297,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 3487,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 4597,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 4705,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 5459,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          }
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestTokenDividendTracker",
            "src": "contracts/TestToken.sol:2274"
          },
          {
            "kind": "state-variable-immutable",
            "name": "minimumTokenBalanceForDividends",
            "src": "contracts/TestToken.sol:2263"
          },
          {
            "kind": "external-library-linking",
            "name": "IterableMapping",
            "src": "contracts/TestToken.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:785"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:787"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:789"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:791"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:792"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:793"
            },
            {
              "label": "magnifiedDividendPerShare",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1400"
            },
            {
              "label": "lastAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1401"
            },
            {
              "label": "magnifiedDividendCorrections",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_int256)",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1417"
            },
            {
              "label": "withdrawnDividends",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1418"
            },
            {
              "label": "totalDividendsDistributed",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1420"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/TestToken.sol:567"
            },
            {
              "label": "tokenHoldersMap",
              "offset": 0,
              "slot": "12",
              "type": "t_struct(Map)816_storage",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2255"
            },
            {
              "label": "lastProcessedIndex",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2256"
            },
            {
              "label": "excludedFromDividends",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2258"
            },
            {
              "label": "lastClaimTimes",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2260"
            },
            {
              "label": "claimWait",
              "offset": 0,
              "slot": "19",
              "type": "t_uint256",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2262"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Map)816_storage": {
              "label": "struct IterableMapping.Map",
              "members": [
                {
                  "label": "keys",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "values",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "indexOf",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "inserted",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "cd6d171e61bb261b98605a1e203c6b46b7d5b5cf9ee8cb2a885820c5f6f02fc8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "Context": {
        "src": "contracts/TestToken.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "DividendPayingToken": {
        "src": "contracts/TestToken.sol:1386",
        "version": {
          "withMetadata": "f580d020e57d292107972895c8b948e21ac1c846ccf23c07473f30dcad37d5c0",
          "withoutMetadata": "25655da96eace5197b77bce2e92c02d5fb6674f5f64bbed5aae868cd055a2fa2",
          "linkedWithoutMetadata": "25655da96eace5197b77bce2e92c02d5fb6674f5f64bbed5aae868cd055a2fa2"
        },
        "inherit": [
          "IDividendPayingTokenOptional",
          "IDividendPayingToken",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathUint",
          "SafeMathInt"
        ],
        "methods": [
          "(string,string)",
          "()",
          "distributeDividends()",
          "distributeBusdDividends(uint256)",
          "withdrawDividend()",
          "dividendOf(address)",
          "withdrawableDividendOf(address)",
          "withdrawnDividendOf(address)",
          "accumulativeDividendOf(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DividendPayingToken",
            "src": "contracts/TestToken.sol:1422"
          },
          {
            "kind": "state-variable-assignment",
            "name": "BUSD",
            "src": "contracts/TestToken.sol:1403"
          },
          {
            "kind": "state-variable-immutable",
            "name": "BUSD",
            "src": "contracts/TestToken.sol:1403"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:785"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:787"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:789"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:791"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:792"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:793"
            },
            {
              "label": "magnifiedDividendPerShare",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1400"
            },
            {
              "label": "lastAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1401"
            },
            {
              "label": "magnifiedDividendCorrections",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_int256)",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1417"
            },
            {
              "label": "withdrawnDividends",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1418"
            },
            {
              "label": "totalDividendsDistributed",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1420"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20": {
        "src": "contracts/TestToken.sol:782",
        "version": {
          "withMetadata": "5ec5a37aaafbd3b24d593282ec8b98c7f638e3832421cacb517add3e43ebcd8a",
          "withoutMetadata": "ee297ca6fa7f054b4a047d434439ade6f00649e758ca9d1bee49ab036367634c",
          "linkedWithoutMetadata": "ee297ca6fa7f054b4a047d434439ade6f00649e758ca9d1bee49ab036367634c"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts/TestToken.sol:804"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:785"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:787"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:789"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:791"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:792"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:793"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IDividendPayingToken": {
        "src": "contracts/TestToken.sol:663",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dividendOf(address)",
          "distributeDividends()",
          "withdrawDividend()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IDividendPayingTokenOptional": {
        "src": "contracts/TestToken.sol:630",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawableDividendOf(address)",
          "withdrawnDividendOf(address)",
          "accumulativeDividendOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts/TestToken.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/TestToken.sol:332",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/TestToken.sol:365",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/TestToken.sol:120",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/TestToken.sol:282",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IterableMapping": {
        "src": "contracts/TestToken.sol:478",
        "version": {
          "withMetadata": "d12a6bb7b1e9d68725c29ea92b7b18acf39f788d40cfd7e56177f61c7c77f048",
          "withoutMetadata": "614397b5f0b08d2006ebdbb717b87002c1b471904164fa1618d8b77f678a056e",
          "linkedWithoutMetadata": "614397b5f0b08d2006ebdbb717b87002c1b471904164fa1618d8b77f678a056e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "get(IterableMapping.Map storage,address)",
          "getIndexOfKey(IterableMapping.Map storage,address)",
          "getKeyAtIndex(IterableMapping.Map storage,uint256)",
          "size(IterableMapping.Map storage)",
          "set(IterableMapping.Map storage,address,uint256)",
          "remove(IterableMapping.Map storage,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "contracts/TestToken.sol:566",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/TestToken.sol:577"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/TestToken.sol:567"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SafeMath": {
        "src": "contracts/TestToken.sol:1145",
        "version": {
          "withMetadata": "b7252b01a316ea4f5bc5836a188821c44f68324be6d8284c00f947ae69dafb6c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMathInt": {
        "src": "contracts/TestToken.sol:700",
        "version": {
          "withMetadata": "8e47ca3d548997fdfa4b382d212ca9062ba9611e4532418b61482e884916368b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMathUint": {
        "src": "contracts/TestToken.sol:744",
        "version": {
          "withMetadata": "b4a95678440c2dd78418bc502092b7370fe4e93910054f992765b2cd0f640ca2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TestToken": {
        "src": "contracts/TestToken.sol:1617",
        "version": {
          "withMetadata": "8f405d3a7da67b82230fc90282ec2a61655684434fafa439807b37a4a062dfba",
          "withoutMetadata": "5d80e62896d81c22c38d1b9e81377a80f61ecab7135c7aa614a8130bc41760b8",
          "linkedWithoutMetadata": "5d80e62896d81c22c38d1b9e81377a80f61ecab7135c7aa614a8130bc41760b8"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "()",
          "()",
          "setBUSDRewardsFeeBuy(uint256)",
          "setDevFeeBuy(uint256)",
          "setMarketingFeeBuy(uint256)",
          "setBUSDRewardsFeesSell(uint256)",
          "setDevFeeSell(uint256)",
          "setMarketingFeeSell(uint256)",
          "setBurnFee(uint256)",
          "updateDividendTracker(address)",
          "updateUniswapV2Router(address)",
          "excludeFromFees(address,bool)",
          "excludeMultipleAccountsFromFees(address[],bool)",
          "setAutomatedMarketMakerPair(address,bool)",
          "updateDevWallet(address)",
          "updateGasForProcessing(uint256)",
          "updateClaimWait(uint256)",
          "getClaimWait()",
          "getTotalDividendsDistributed()",
          "SetmaxSellTransactionAmount(uint256)",
          "setswapTokensAtAmount(uint256)",
          "isExcludedFromFees(address)",
          "withdrawableDividendOf(address)",
          "dividendTokenBalanceOf(address)",
          "getAccountDividendsInfo(address)",
          "getAccountDividendsInfoAtIndex(uint256)",
          "processDividendTracker(uint256)",
          "claim()",
          "getLastProcessedIndex()",
          "getNumberOfDividendTokenHolders()",
          "getTradingIsEnabled()"
        ],
        "linkReferences": [
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 20208,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 20424,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 20614,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 21724,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 21832,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 22586,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          }
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestToken",
            "src": "contracts/TestToken.sol:1718"
          },
          {
            "kind": "state-variable-immutable",
            "name": "uniswapV2Pair",
            "src": "contracts/TestToken.sol:1621"
          },
          {
            "kind": "state-variable-assignment",
            "name": "BUSD",
            "src": "contracts/TestToken.sol:1623"
          },
          {
            "kind": "state-variable-immutable",
            "name": "BUSD",
            "src": "contracts/TestToken.sol:1623"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MarketingWallet",
            "src": "contracts/TestToken.sol:1625"
          },
          {
            "kind": "state-variable-assignment",
            "name": "BurnAddress",
            "src": "contracts/TestToken.sol:1626"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MarketingWalletReserve",
            "src": "contracts/TestToken.sol:1633"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DevWalletReserve",
            "src": "contracts/TestToken.sol:1634"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxSellTransactionAmount",
            "src": "contracts/TestToken.sol:1636"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_swapTokensAtAmount",
            "src": "contracts/TestToken.sol:1637"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxTxAmount",
            "src": "contracts/TestToken.sol:1638"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxWalletAmount",
            "src": "contracts/TestToken.sol:1639"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MarketingFeeSell",
            "src": "contracts/TestToken.sol:1645"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MarketingFeeBuy",
            "src": "contracts/TestToken.sol:1646"
          },
          {
            "kind": "state-variable-assignment",
            "name": "BurnFee",
            "src": "contracts/TestToken.sol:1647"
          },
          {
            "kind": "state-variable-immutable",
            "name": "totalFees",
            "src": "contracts/TestToken.sol:1648"
          },
          {
            "kind": "state-variable-assignment",
            "name": "sellFeeIncreaseFactor",
            "src": "contracts/TestToken.sol:1651"
          },
          {
            "kind": "state-variable-immutable",
            "name": "sellFeeIncreaseFactor",
            "src": "contracts/TestToken.sol:1651"
          },
          {
            "kind": "state-variable-assignment",
            "name": "gasForProcessing",
            "src": "contracts/TestToken.sol:1654"
          },
          {
            "kind": "state-variable-assignment",
            "name": "tradingEnabledTimestamp",
            "src": "contracts/TestToken.sol:1657"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tradingEnabledTimestamp",
            "src": "contracts/TestToken.sol:1657"
          },
          {
            "kind": "external-library-linking",
            "name": "IterableMapping",
            "src": "contracts/TestToken.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:785"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:787"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:789"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:791"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:792"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:793"
            },
            {
              "label": "_owner",
              "offset": 1,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/TestToken.sol:567"
            },
            {
              "label": "uniswapV2Router",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IUniswapV2Router02)496",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1620"
            },
            {
              "label": "MarketingWallet",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1625"
            },
            {
              "label": "BurnAddress",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1626"
            },
            {
              "label": "swapping",
              "offset": 20,
              "slot": "8",
              "type": "t_bool",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1627"
            },
            {
              "label": "dividendTracker",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(TestTokenDividendTracker)5049",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1629"
            },
            {
              "label": "DevWallet",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1631"
            },
            {
              "label": "MarketingWalletReserve",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1633"
            },
            {
              "label": "DevWalletReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1634"
            },
            {
              "label": "_maxSellTransactionAmount",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1636"
            },
            {
              "label": "_swapTokensAtAmount",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1637"
            },
            {
              "label": "_maxTxAmount",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1638"
            },
            {
              "label": "_maxWalletAmount",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1639"
            },
            {
              "label": "BUSDRewardsFeeBuy",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1641"
            },
            {
              "label": "BUSDRewardsFeeSell",
              "offset": 0,
              "slot": "18",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1642"
            },
            {
              "label": "DevFeeBuy",
              "offset": 0,
              "slot": "19",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1643"
            },
            {
              "label": "DevFeeSell",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1644"
            },
            {
              "label": "MarketingFeeSell",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1645"
            },
            {
              "label": "MarketingFeeBuy",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1646"
            },
            {
              "label": "BurnFee",
              "offset": 0,
              "slot": "23",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1647"
            },
            {
              "label": "gasForProcessing",
              "offset": 0,
              "slot": "24",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1654"
            },
            {
              "label": "_isExcludedFromFees",
              "offset": 0,
              "slot": "25",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1660"
            },
            {
              "label": "canTransferBeforeTradingIsEnabled",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1663"
            },
            {
              "label": "automatedMarketMakerPairs",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1667"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IUniswapV2Router02)496": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_contract(TestTokenDividendTracker)5049": {
              "label": "contract TestTokenDividendTracker",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestTokenDividendTracker": {
        "src": "contracts/TestToken.sol:2249",
        "version": {
          "withMetadata": "5c3b9a770afa16296b74bd8f79427749f0f9d29f5ed8fbb7854f4d557a2aa9a5",
          "withoutMetadata": "99afcb3423dbe26baf24eb41d0cfb00ac6c24c7a5d12c5b8ce85104b24cacf61",
          "linkedWithoutMetadata": "99afcb3423dbe26baf24eb41d0cfb00ac6c24c7a5d12c5b8ce85104b24cacf61"
        },
        "inherit": [
          "Ownable",
          "DividendPayingToken",
          "IDividendPayingTokenOptional",
          "IDividendPayingToken",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt",
          "IterableMapping"
        ],
        "methods": [
          "()",
          "withdrawDividend()",
          "excludeFromDividends(address)",
          "updateClaimWait(uint256)",
          "getLastProcessedIndex()",
          "getNumberOfTokenHolders()",
          "getAccount(address)",
          "getAccountAtIndex(uint256)",
          "setBalance(address payable,uint256)",
          "process(uint256)",
          "processAccount(address payable,bool)"
        ],
        "linkReferences": [
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 3081,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 3297,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 3487,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 4597,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 4705,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 5459,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          }
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestTokenDividendTracker",
            "src": "contracts/TestToken.sol:2273"
          },
          {
            "kind": "state-variable-immutable",
            "name": "minimumTokenBalanceForDividends",
            "src": "contracts/TestToken.sol:2262"
          },
          {
            "kind": "external-library-linking",
            "name": "IterableMapping",
            "src": "contracts/TestToken.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:785"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:787"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:789"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:791"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:792"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:793"
            },
            {
              "label": "magnifiedDividendPerShare",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1400"
            },
            {
              "label": "lastAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1401"
            },
            {
              "label": "magnifiedDividendCorrections",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_int256)",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1417"
            },
            {
              "label": "withdrawnDividends",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1418"
            },
            {
              "label": "totalDividendsDistributed",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1420"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/TestToken.sol:567"
            },
            {
              "label": "tokenHoldersMap",
              "offset": 0,
              "slot": "12",
              "type": "t_struct(Map)816_storage",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2254"
            },
            {
              "label": "lastProcessedIndex",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2255"
            },
            {
              "label": "excludedFromDividends",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2257"
            },
            {
              "label": "lastClaimTimes",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2259"
            },
            {
              "label": "claimWait",
              "offset": 0,
              "slot": "19",
              "type": "t_uint256",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2261"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Map)816_storage": {
              "label": "struct IterableMapping.Map",
              "members": [
                {
                  "label": "keys",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "values",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "indexOf",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "inserted",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "cd6d171e61bb261b98605a1e203c6b46b7d5b5cf9ee8cb2a885820c5f6f02fc8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "Context": {
        "src": "contracts/TestToken.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "DividendPayingToken": {
        "src": "contracts/TestToken.sol:1386",
        "version": {
          "withMetadata": "94be67a86de307dea905802c174187b625930ce02459953494dc2f68c107da60",
          "withoutMetadata": "25655da96eace5197b77bce2e92c02d5fb6674f5f64bbed5aae868cd055a2fa2",
          "linkedWithoutMetadata": "25655da96eace5197b77bce2e92c02d5fb6674f5f64bbed5aae868cd055a2fa2"
        },
        "inherit": [
          "IDividendPayingTokenOptional",
          "IDividendPayingToken",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathUint",
          "SafeMathInt"
        ],
        "methods": [
          "(string,string)",
          "()",
          "distributeDividends()",
          "distributeBusdDividends(uint256)",
          "withdrawDividend()",
          "dividendOf(address)",
          "withdrawableDividendOf(address)",
          "withdrawnDividendOf(address)",
          "accumulativeDividendOf(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DividendPayingToken",
            "src": "contracts/TestToken.sol:1422"
          },
          {
            "kind": "state-variable-assignment",
            "name": "BUSD",
            "src": "contracts/TestToken.sol:1403"
          },
          {
            "kind": "state-variable-immutable",
            "name": "BUSD",
            "src": "contracts/TestToken.sol:1403"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:785"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:787"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:789"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:791"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:792"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:793"
            },
            {
              "label": "magnifiedDividendPerShare",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1400"
            },
            {
              "label": "lastAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1401"
            },
            {
              "label": "magnifiedDividendCorrections",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_int256)",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1417"
            },
            {
              "label": "withdrawnDividends",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1418"
            },
            {
              "label": "totalDividendsDistributed",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1420"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20": {
        "src": "contracts/TestToken.sol:782",
        "version": {
          "withMetadata": "05c1ea3f61d84abee15b7a2fe216628ccc6b56424e7da4b607d0153617b7d6a7",
          "withoutMetadata": "ee297ca6fa7f054b4a047d434439ade6f00649e758ca9d1bee49ab036367634c",
          "linkedWithoutMetadata": "ee297ca6fa7f054b4a047d434439ade6f00649e758ca9d1bee49ab036367634c"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts/TestToken.sol:804"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:785"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:787"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:789"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:791"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:792"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:793"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IDividendPayingToken": {
        "src": "contracts/TestToken.sol:663",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dividendOf(address)",
          "distributeDividends()",
          "withdrawDividend()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IDividendPayingTokenOptional": {
        "src": "contracts/TestToken.sol:630",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawableDividendOf(address)",
          "withdrawnDividendOf(address)",
          "accumulativeDividendOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts/TestToken.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/TestToken.sol:332",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/TestToken.sol:365",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/TestToken.sol:120",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/TestToken.sol:282",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IterableMapping": {
        "src": "contracts/TestToken.sol:478",
        "version": {
          "withMetadata": "7d85806ae59705d90e2b57506e4666dda96d1d272fd900d3193a799544969686",
          "withoutMetadata": "614397b5f0b08d2006ebdbb717b87002c1b471904164fa1618d8b77f678a056e",
          "linkedWithoutMetadata": "614397b5f0b08d2006ebdbb717b87002c1b471904164fa1618d8b77f678a056e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "get(IterableMapping.Map storage,address)",
          "getIndexOfKey(IterableMapping.Map storage,address)",
          "getKeyAtIndex(IterableMapping.Map storage,uint256)",
          "size(IterableMapping.Map storage)",
          "set(IterableMapping.Map storage,address,uint256)",
          "remove(IterableMapping.Map storage,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "contracts/TestToken.sol:566",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/TestToken.sol:577"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/TestToken.sol:567"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SafeMath": {
        "src": "contracts/TestToken.sol:1145",
        "version": {
          "withMetadata": "6e5aa8194077e6d355f7023fb9fb165b41bf66830f5ec9610c88d11d333765bd",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMathInt": {
        "src": "contracts/TestToken.sol:700",
        "version": {
          "withMetadata": "92fe7429355f5a089b6b028cca94f19b8c6ad6c72f4f48a6b242f7b546be32d8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMathUint": {
        "src": "contracts/TestToken.sol:744",
        "version": {
          "withMetadata": "e56e605887063b7453aeb0019553048b2325e55a8d683e5d5207f1120062aae4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TestToken": {
        "src": "contracts/TestToken.sol:1617",
        "version": {
          "withMetadata": "325e8ac7ded9043cc75bcbe749c5c0dc9d4bbe4887abddc57038b121ca210940",
          "withoutMetadata": "96029fa5db5c604e0d082fae884cab23b60db690b384f404869e08de3c626804",
          "linkedWithoutMetadata": "96029fa5db5c604e0d082fae884cab23b60db690b384f404869e08de3c626804"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "()",
          "()",
          "setBUSDRewardsFeeBuy(uint256)",
          "setDevFeeBuy(uint256)",
          "setMarketingFeeBuy(uint256)",
          "setBUSDRewardsFeesSell(uint256)",
          "setDevFeeSell(uint256)",
          "setMarketingFeeSell(uint256)",
          "setBurnFee(uint256)",
          "updateDividendTracker(address)",
          "updateUniswapV2Router(address)",
          "excludeFromFees(address,bool)",
          "excludeMultipleAccountsFromFees(address[],bool)",
          "setAutomatedMarketMakerPair(address,bool)",
          "updateDevWallet(address)",
          "updateGasForProcessing(uint256)",
          "updateClaimWait(uint256)",
          "getClaimWait()",
          "getTotalDividendsDistributed()",
          "SetmaxSellTransactionAmount(uint256)",
          "setswapTokensAtAmount(uint256)",
          "isExcludedFromFees(address)",
          "withdrawableDividendOf(address)",
          "dividendTokenBalanceOf(address)",
          "getAccountDividendsInfo(address)",
          "getAccountDividendsInfoAtIndex(uint256)",
          "processDividendTracker(uint256)",
          "claim()",
          "getLastProcessedIndex()",
          "getNumberOfDividendTokenHolders()",
          "getTradingIsEnabled()"
        ],
        "linkReferences": [
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 20133,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 20349,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 20539,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 21649,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 21757,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 22511,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          }
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestToken",
            "src": "contracts/TestToken.sol:1718"
          },
          {
            "kind": "state-variable-immutable",
            "name": "uniswapV2Pair",
            "src": "contracts/TestToken.sol:1621"
          },
          {
            "kind": "state-variable-assignment",
            "name": "BUSD",
            "src": "contracts/TestToken.sol:1623"
          },
          {
            "kind": "state-variable-immutable",
            "name": "BUSD",
            "src": "contracts/TestToken.sol:1623"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MarketingWallet",
            "src": "contracts/TestToken.sol:1625"
          },
          {
            "kind": "state-variable-assignment",
            "name": "BurnAddress",
            "src": "contracts/TestToken.sol:1626"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MarketingWalletReserve",
            "src": "contracts/TestToken.sol:1633"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DevWalletReserve",
            "src": "contracts/TestToken.sol:1634"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxSellTransactionAmount",
            "src": "contracts/TestToken.sol:1636"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_swapTokensAtAmount",
            "src": "contracts/TestToken.sol:1637"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxTxAmount",
            "src": "contracts/TestToken.sol:1638"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxWalletAmount",
            "src": "contracts/TestToken.sol:1639"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MarketingFeeSell",
            "src": "contracts/TestToken.sol:1645"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MarketingFeeBuy",
            "src": "contracts/TestToken.sol:1646"
          },
          {
            "kind": "state-variable-assignment",
            "name": "BurnFee",
            "src": "contracts/TestToken.sol:1647"
          },
          {
            "kind": "state-variable-immutable",
            "name": "totalFees",
            "src": "contracts/TestToken.sol:1648"
          },
          {
            "kind": "state-variable-assignment",
            "name": "sellFeeIncreaseFactor",
            "src": "contracts/TestToken.sol:1651"
          },
          {
            "kind": "state-variable-immutable",
            "name": "sellFeeIncreaseFactor",
            "src": "contracts/TestToken.sol:1651"
          },
          {
            "kind": "state-variable-assignment",
            "name": "gasForProcessing",
            "src": "contracts/TestToken.sol:1654"
          },
          {
            "kind": "state-variable-assignment",
            "name": "tradingEnabledTimestamp",
            "src": "contracts/TestToken.sol:1657"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tradingEnabledTimestamp",
            "src": "contracts/TestToken.sol:1657"
          },
          {
            "kind": "external-library-linking",
            "name": "IterableMapping",
            "src": "contracts/TestToken.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:785"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:787"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:789"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:791"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:792"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:793"
            },
            {
              "label": "_owner",
              "offset": 1,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/TestToken.sol:567"
            },
            {
              "label": "uniswapV2Router",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IUniswapV2Router02)496",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1620"
            },
            {
              "label": "MarketingWallet",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1625"
            },
            {
              "label": "BurnAddress",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1626"
            },
            {
              "label": "swapping",
              "offset": 20,
              "slot": "8",
              "type": "t_bool",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1627"
            },
            {
              "label": "dividendTracker",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(TestTokenDividendTracker)5021",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1629"
            },
            {
              "label": "DevWallet",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1631"
            },
            {
              "label": "MarketingWalletReserve",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1633"
            },
            {
              "label": "DevWalletReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1634"
            },
            {
              "label": "_maxSellTransactionAmount",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1636"
            },
            {
              "label": "_swapTokensAtAmount",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1637"
            },
            {
              "label": "_maxTxAmount",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1638"
            },
            {
              "label": "_maxWalletAmount",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1639"
            },
            {
              "label": "BUSDRewardsFeeBuy",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1641"
            },
            {
              "label": "BUSDRewardsFeeSell",
              "offset": 0,
              "slot": "18",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1642"
            },
            {
              "label": "DevFeeBuy",
              "offset": 0,
              "slot": "19",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1643"
            },
            {
              "label": "DevFeeSell",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1644"
            },
            {
              "label": "MarketingFeeSell",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1645"
            },
            {
              "label": "MarketingFeeBuy",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1646"
            },
            {
              "label": "BurnFee",
              "offset": 0,
              "slot": "23",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1647"
            },
            {
              "label": "gasForProcessing",
              "offset": 0,
              "slot": "24",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1654"
            },
            {
              "label": "_isExcludedFromFees",
              "offset": 0,
              "slot": "25",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1660"
            },
            {
              "label": "canTransferBeforeTradingIsEnabled",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1663"
            },
            {
              "label": "automatedMarketMakerPairs",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1667"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IUniswapV2Router02)496": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_contract(TestTokenDividendTracker)5021": {
              "label": "contract TestTokenDividendTracker",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestTokenDividendTracker": {
        "src": "contracts/TestToken.sol:2237",
        "version": {
          "withMetadata": "615a1a42a70c5038ab6d6b60a40810597613301a5e6cd35119df3f26a1d3ba08",
          "withoutMetadata": "99afcb3423dbe26baf24eb41d0cfb00ac6c24c7a5d12c5b8ce85104b24cacf61",
          "linkedWithoutMetadata": "99afcb3423dbe26baf24eb41d0cfb00ac6c24c7a5d12c5b8ce85104b24cacf61"
        },
        "inherit": [
          "Ownable",
          "DividendPayingToken",
          "IDividendPayingTokenOptional",
          "IDividendPayingToken",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt",
          "IterableMapping"
        ],
        "methods": [
          "()",
          "withdrawDividend()",
          "excludeFromDividends(address)",
          "updateClaimWait(uint256)",
          "getLastProcessedIndex()",
          "getNumberOfTokenHolders()",
          "getAccount(address)",
          "getAccountAtIndex(uint256)",
          "setBalance(address payable,uint256)",
          "process(uint256)",
          "processAccount(address payable,bool)"
        ],
        "linkReferences": [
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 3081,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 3297,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 3487,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 4597,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 4705,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 5459,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          }
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestTokenDividendTracker",
            "src": "contracts/TestToken.sol:2261"
          },
          {
            "kind": "state-variable-immutable",
            "name": "minimumTokenBalanceForDividends",
            "src": "contracts/TestToken.sol:2250"
          },
          {
            "kind": "external-library-linking",
            "name": "IterableMapping",
            "src": "contracts/TestToken.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:785"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:787"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:789"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:791"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:792"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:793"
            },
            {
              "label": "magnifiedDividendPerShare",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1400"
            },
            {
              "label": "lastAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1401"
            },
            {
              "label": "magnifiedDividendCorrections",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_int256)",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1417"
            },
            {
              "label": "withdrawnDividends",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1418"
            },
            {
              "label": "totalDividendsDistributed",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1420"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/TestToken.sol:567"
            },
            {
              "label": "tokenHoldersMap",
              "offset": 0,
              "slot": "12",
              "type": "t_struct(Map)816_storage",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2242"
            },
            {
              "label": "lastProcessedIndex",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2243"
            },
            {
              "label": "excludedFromDividends",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2245"
            },
            {
              "label": "lastClaimTimes",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2247"
            },
            {
              "label": "claimWait",
              "offset": 0,
              "slot": "19",
              "type": "t_uint256",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Map)816_storage": {
              "label": "struct IterableMapping.Map",
              "members": [
                {
                  "label": "keys",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "values",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "indexOf",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "inserted",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "cd6d171e61bb261b98605a1e203c6b46b7d5b5cf9ee8cb2a885820c5f6f02fc8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "Context": {
        "src": "contracts/TestToken.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "DividendPayingToken": {
        "src": "contracts/TestToken.sol:1386",
        "version": {
          "withMetadata": "b803be2168c1cf8b1b0b206d437e14f3a0e70678006fee5124e77e5799649b03",
          "withoutMetadata": "25655da96eace5197b77bce2e92c02d5fb6674f5f64bbed5aae868cd055a2fa2",
          "linkedWithoutMetadata": "25655da96eace5197b77bce2e92c02d5fb6674f5f64bbed5aae868cd055a2fa2"
        },
        "inherit": [
          "IDividendPayingTokenOptional",
          "IDividendPayingToken",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathUint",
          "SafeMathInt"
        ],
        "methods": [
          "(string,string)",
          "()",
          "distributeDividends()",
          "distributeBusdDividends(uint256)",
          "withdrawDividend()",
          "dividendOf(address)",
          "withdrawableDividendOf(address)",
          "withdrawnDividendOf(address)",
          "accumulativeDividendOf(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DividendPayingToken",
            "src": "contracts/TestToken.sol:1422"
          },
          {
            "kind": "state-variable-assignment",
            "name": "BUSD",
            "src": "contracts/TestToken.sol:1403"
          },
          {
            "kind": "state-variable-immutable",
            "name": "BUSD",
            "src": "contracts/TestToken.sol:1403"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:785"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:787"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:789"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:791"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:792"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:793"
            },
            {
              "label": "magnifiedDividendPerShare",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1400"
            },
            {
              "label": "lastAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1401"
            },
            {
              "label": "magnifiedDividendCorrections",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_int256)",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1417"
            },
            {
              "label": "withdrawnDividends",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1418"
            },
            {
              "label": "totalDividendsDistributed",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1420"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20": {
        "src": "contracts/TestToken.sol:782",
        "version": {
          "withMetadata": "2176b88bb612ed82baf6abd30b765c7eb204a4995ed1974aa7a6ee608b9ad0d7",
          "withoutMetadata": "ee297ca6fa7f054b4a047d434439ade6f00649e758ca9d1bee49ab036367634c",
          "linkedWithoutMetadata": "ee297ca6fa7f054b4a047d434439ade6f00649e758ca9d1bee49ab036367634c"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts/TestToken.sol:804"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:785"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:787"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:789"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:791"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:792"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:793"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IDividendPayingToken": {
        "src": "contracts/TestToken.sol:663",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dividendOf(address)",
          "distributeDividends()",
          "withdrawDividend()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IDividendPayingTokenOptional": {
        "src": "contracts/TestToken.sol:630",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawableDividendOf(address)",
          "withdrawnDividendOf(address)",
          "accumulativeDividendOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts/TestToken.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/TestToken.sol:332",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/TestToken.sol:365",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/TestToken.sol:120",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/TestToken.sol:282",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IterableMapping": {
        "src": "contracts/TestToken.sol:478",
        "version": {
          "withMetadata": "d4212e8d7f7a0971db12d2ddc4b3e34f62cebdb4ca4c6bd2f1429db2b8017654",
          "withoutMetadata": "614397b5f0b08d2006ebdbb717b87002c1b471904164fa1618d8b77f678a056e",
          "linkedWithoutMetadata": "614397b5f0b08d2006ebdbb717b87002c1b471904164fa1618d8b77f678a056e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "get(IterableMapping.Map storage,address)",
          "getIndexOfKey(IterableMapping.Map storage,address)",
          "getKeyAtIndex(IterableMapping.Map storage,uint256)",
          "size(IterableMapping.Map storage)",
          "set(IterableMapping.Map storage,address,uint256)",
          "remove(IterableMapping.Map storage,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "contracts/TestToken.sol:566",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/TestToken.sol:577"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/TestToken.sol:567"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SafeMath": {
        "src": "contracts/TestToken.sol:1145",
        "version": {
          "withMetadata": "3f65523ee99b16f934bc67a68f2a9ac18649fb470c58ee6aee8d264247973402",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMathInt": {
        "src": "contracts/TestToken.sol:700",
        "version": {
          "withMetadata": "d0e2974b99395bb91b9f71c2eca37e9e5480ca223c3bfbfbf9f490617a6ad205",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMathUint": {
        "src": "contracts/TestToken.sol:744",
        "version": {
          "withMetadata": "733ea721781f5ba38cc05db2b408d2e377275514e1d4377b811350aa04db7cdb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TestToken": {
        "src": "contracts/TestToken.sol:1617",
        "version": {
          "withMetadata": "b44eee91e2c7e8f2358cf54fbacf2559f9616026e98c7263ffa161cd8949ce38",
          "withoutMetadata": "be4742be37cf3fe35a74e66e957bd2b8c68d2cdc34e699653a3be332a6893054",
          "linkedWithoutMetadata": "be4742be37cf3fe35a74e66e957bd2b8c68d2cdc34e699653a3be332a6893054"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "()",
          "()",
          "setBUSDRewardsFeeBuy(uint256)",
          "setDevFeeBuy(uint256)",
          "setMarketingFeeBuy(uint256)",
          "setBUSDRewardsFeesSell(uint256)",
          "setDevFeeSell(uint256)",
          "setMarketingFeeSell(uint256)",
          "setBurnFee(uint256)",
          "updateDividendTracker(address)",
          "updateUniswapV2Router(address)",
          "excludeFromFees(address,bool)",
          "excludeMultipleAccountsFromFees(address[],bool)",
          "setAutomatedMarketMakerPair(address,bool)",
          "updateDevWallet(address)",
          "updateGasForProcessing(uint256)",
          "updateClaimWait(uint256)",
          "getClaimWait()",
          "getTotalDividendsDistributed()",
          "SetmaxSellTransactionAmount(uint256)",
          "setswapTokensAtAmount(uint256)",
          "isExcludedFromFees(address)",
          "withdrawableDividendOf(address)",
          "dividendTokenBalanceOf(address)",
          "getAccountDividendsInfo(address)",
          "getAccountDividendsInfoAtIndex(uint256)",
          "processDividendTracker(uint256)",
          "claim()",
          "getLastProcessedIndex()",
          "getNumberOfDividendTokenHolders()",
          "getTradingIsEnabled()"
        ],
        "linkReferences": [
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 20211,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 20427,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 20617,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 21727,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 21835,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 22589,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          }
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestToken",
            "src": "contracts/TestToken.sol:1718"
          },
          {
            "kind": "state-variable-immutable",
            "name": "uniswapV2Pair",
            "src": "contracts/TestToken.sol:1621"
          },
          {
            "kind": "state-variable-assignment",
            "name": "BUSD",
            "src": "contracts/TestToken.sol:1623"
          },
          {
            "kind": "state-variable-immutable",
            "name": "BUSD",
            "src": "contracts/TestToken.sol:1623"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MarketingWallet",
            "src": "contracts/TestToken.sol:1625"
          },
          {
            "kind": "state-variable-assignment",
            "name": "BurnAddress",
            "src": "contracts/TestToken.sol:1626"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MarketingWalletReserve",
            "src": "contracts/TestToken.sol:1633"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DevWalletReserve",
            "src": "contracts/TestToken.sol:1634"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxSellTransactionAmount",
            "src": "contracts/TestToken.sol:1636"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_swapTokensAtAmount",
            "src": "contracts/TestToken.sol:1637"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxTxAmount",
            "src": "contracts/TestToken.sol:1638"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxWalletAmount",
            "src": "contracts/TestToken.sol:1639"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MarketingFeeSell",
            "src": "contracts/TestToken.sol:1645"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MarketingFeeBuy",
            "src": "contracts/TestToken.sol:1646"
          },
          {
            "kind": "state-variable-assignment",
            "name": "BurnFee",
            "src": "contracts/TestToken.sol:1647"
          },
          {
            "kind": "state-variable-immutable",
            "name": "totalFees",
            "src": "contracts/TestToken.sol:1648"
          },
          {
            "kind": "state-variable-assignment",
            "name": "sellFeeIncreaseFactor",
            "src": "contracts/TestToken.sol:1651"
          },
          {
            "kind": "state-variable-immutable",
            "name": "sellFeeIncreaseFactor",
            "src": "contracts/TestToken.sol:1651"
          },
          {
            "kind": "state-variable-assignment",
            "name": "gasForProcessing",
            "src": "contracts/TestToken.sol:1654"
          },
          {
            "kind": "state-variable-assignment",
            "name": "tradingEnabledTimestamp",
            "src": "contracts/TestToken.sol:1657"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tradingEnabledTimestamp",
            "src": "contracts/TestToken.sol:1657"
          },
          {
            "kind": "external-library-linking",
            "name": "IterableMapping",
            "src": "contracts/TestToken.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:785"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:787"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:789"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:791"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:792"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:793"
            },
            {
              "label": "_owner",
              "offset": 1,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/TestToken.sol:567"
            },
            {
              "label": "uniswapV2Router",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IUniswapV2Router02)496",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1620"
            },
            {
              "label": "MarketingWallet",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1625"
            },
            {
              "label": "BurnAddress",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1626"
            },
            {
              "label": "swapping",
              "offset": 20,
              "slot": "8",
              "type": "t_bool",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1627"
            },
            {
              "label": "dividendTracker",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(TestTokenDividendTracker)5049",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1629"
            },
            {
              "label": "DevWallet",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1631"
            },
            {
              "label": "MarketingWalletReserve",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1633"
            },
            {
              "label": "DevWalletReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1634"
            },
            {
              "label": "_maxSellTransactionAmount",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1636"
            },
            {
              "label": "_swapTokensAtAmount",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1637"
            },
            {
              "label": "_maxTxAmount",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1638"
            },
            {
              "label": "_maxWalletAmount",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1639"
            },
            {
              "label": "BUSDRewardsFeeBuy",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1641"
            },
            {
              "label": "BUSDRewardsFeeSell",
              "offset": 0,
              "slot": "18",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1642"
            },
            {
              "label": "DevFeeBuy",
              "offset": 0,
              "slot": "19",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1643"
            },
            {
              "label": "DevFeeSell",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1644"
            },
            {
              "label": "MarketingFeeSell",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1645"
            },
            {
              "label": "MarketingFeeBuy",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1646"
            },
            {
              "label": "BurnFee",
              "offset": 0,
              "slot": "23",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1647"
            },
            {
              "label": "gasForProcessing",
              "offset": 0,
              "slot": "24",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1654"
            },
            {
              "label": "_isExcludedFromFees",
              "offset": 0,
              "slot": "25",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1660"
            },
            {
              "label": "canTransferBeforeTradingIsEnabled",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1663"
            },
            {
              "label": "automatedMarketMakerPairs",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1667"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IUniswapV2Router02)496": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_contract(TestTokenDividendTracker)5049": {
              "label": "contract TestTokenDividendTracker",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestTokenDividendTracker": {
        "src": "contracts/TestToken.sol:2249",
        "version": {
          "withMetadata": "a2803342d88169c26161d7747e13f2c2c9c991b390654696c82e1963abcf3d24",
          "withoutMetadata": "99afcb3423dbe26baf24eb41d0cfb00ac6c24c7a5d12c5b8ce85104b24cacf61",
          "linkedWithoutMetadata": "99afcb3423dbe26baf24eb41d0cfb00ac6c24c7a5d12c5b8ce85104b24cacf61"
        },
        "inherit": [
          "Ownable",
          "DividendPayingToken",
          "IDividendPayingTokenOptional",
          "IDividendPayingToken",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt",
          "IterableMapping"
        ],
        "methods": [
          "()",
          "withdrawDividend()",
          "excludeFromDividends(address)",
          "updateClaimWait(uint256)",
          "getLastProcessedIndex()",
          "getNumberOfTokenHolders()",
          "getAccount(address)",
          "getAccountAtIndex(uint256)",
          "setBalance(address payable,uint256)",
          "process(uint256)",
          "processAccount(address payable,bool)"
        ],
        "linkReferences": [
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 3081,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 3297,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 3487,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 4597,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 4705,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 5459,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          }
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestTokenDividendTracker",
            "src": "contracts/TestToken.sol:2273"
          },
          {
            "kind": "state-variable-immutable",
            "name": "minimumTokenBalanceForDividends",
            "src": "contracts/TestToken.sol:2262"
          },
          {
            "kind": "external-library-linking",
            "name": "IterableMapping",
            "src": "contracts/TestToken.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:785"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:787"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:789"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:791"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:792"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:793"
            },
            {
              "label": "magnifiedDividendPerShare",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1400"
            },
            {
              "label": "lastAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1401"
            },
            {
              "label": "magnifiedDividendCorrections",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_int256)",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1417"
            },
            {
              "label": "withdrawnDividends",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1418"
            },
            {
              "label": "totalDividendsDistributed",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1420"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/TestToken.sol:567"
            },
            {
              "label": "tokenHoldersMap",
              "offset": 0,
              "slot": "12",
              "type": "t_struct(Map)816_storage",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2254"
            },
            {
              "label": "lastProcessedIndex",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2255"
            },
            {
              "label": "excludedFromDividends",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2257"
            },
            {
              "label": "lastClaimTimes",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2259"
            },
            {
              "label": "claimWait",
              "offset": 0,
              "slot": "19",
              "type": "t_uint256",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2261"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Map)816_storage": {
              "label": "struct IterableMapping.Map",
              "members": [
                {
                  "label": "keys",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "values",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "indexOf",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "inserted",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "cd6d171e61bb261b98605a1e203c6b46b7d5b5cf9ee8cb2a885820c5f6f02fc8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "Context": {
        "src": "contracts/TestToken.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "DividendPayingToken": {
        "src": "contracts/TestToken.sol:1386",
        "version": {
          "withMetadata": "b803be2168c1cf8b1b0b206d437e14f3a0e70678006fee5124e77e5799649b03",
          "withoutMetadata": "25655da96eace5197b77bce2e92c02d5fb6674f5f64bbed5aae868cd055a2fa2",
          "linkedWithoutMetadata": "25655da96eace5197b77bce2e92c02d5fb6674f5f64bbed5aae868cd055a2fa2"
        },
        "inherit": [
          "IDividendPayingTokenOptional",
          "IDividendPayingToken",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathUint",
          "SafeMathInt"
        ],
        "methods": [
          "(string,string)",
          "()",
          "distributeDividends()",
          "distributeBusdDividends(uint256)",
          "withdrawDividend()",
          "dividendOf(address)",
          "withdrawableDividendOf(address)",
          "withdrawnDividendOf(address)",
          "accumulativeDividendOf(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DividendPayingToken",
            "src": "contracts/TestToken.sol:1422"
          },
          {
            "kind": "state-variable-assignment",
            "name": "BUSD",
            "src": "contracts/TestToken.sol:1403"
          },
          {
            "kind": "state-variable-immutable",
            "name": "BUSD",
            "src": "contracts/TestToken.sol:1403"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:785"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:787"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:789"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:791"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:792"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:793"
            },
            {
              "label": "magnifiedDividendPerShare",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1400"
            },
            {
              "label": "lastAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1401"
            },
            {
              "label": "magnifiedDividendCorrections",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_int256)",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1417"
            },
            {
              "label": "withdrawnDividends",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1418"
            },
            {
              "label": "totalDividendsDistributed",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1420"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20": {
        "src": "contracts/TestToken.sol:782",
        "version": {
          "withMetadata": "2176b88bb612ed82baf6abd30b765c7eb204a4995ed1974aa7a6ee608b9ad0d7",
          "withoutMetadata": "ee297ca6fa7f054b4a047d434439ade6f00649e758ca9d1bee49ab036367634c",
          "linkedWithoutMetadata": "ee297ca6fa7f054b4a047d434439ade6f00649e758ca9d1bee49ab036367634c"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts/TestToken.sol:804"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:785"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:787"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:789"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:791"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:792"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:793"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IDividendPayingToken": {
        "src": "contracts/TestToken.sol:663",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dividendOf(address)",
          "distributeDividends()",
          "withdrawDividend()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IDividendPayingTokenOptional": {
        "src": "contracts/TestToken.sol:630",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawableDividendOf(address)",
          "withdrawnDividendOf(address)",
          "accumulativeDividendOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts/TestToken.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/TestToken.sol:332",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/TestToken.sol:365",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/TestToken.sol:120",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/TestToken.sol:282",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IterableMapping": {
        "src": "contracts/TestToken.sol:478",
        "version": {
          "withMetadata": "d4212e8d7f7a0971db12d2ddc4b3e34f62cebdb4ca4c6bd2f1429db2b8017654",
          "withoutMetadata": "614397b5f0b08d2006ebdbb717b87002c1b471904164fa1618d8b77f678a056e",
          "linkedWithoutMetadata": "614397b5f0b08d2006ebdbb717b87002c1b471904164fa1618d8b77f678a056e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "get(IterableMapping.Map storage,address)",
          "getIndexOfKey(IterableMapping.Map storage,address)",
          "getKeyAtIndex(IterableMapping.Map storage,uint256)",
          "size(IterableMapping.Map storage)",
          "set(IterableMapping.Map storage,address,uint256)",
          "remove(IterableMapping.Map storage,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "contracts/TestToken.sol:566",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/TestToken.sol:577"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/TestToken.sol:567"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SafeMath": {
        "src": "contracts/TestToken.sol:1145",
        "version": {
          "withMetadata": "3f65523ee99b16f934bc67a68f2a9ac18649fb470c58ee6aee8d264247973402",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMathInt": {
        "src": "contracts/TestToken.sol:700",
        "version": {
          "withMetadata": "d0e2974b99395bb91b9f71c2eca37e9e5480ca223c3bfbfbf9f490617a6ad205",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMathUint": {
        "src": "contracts/TestToken.sol:744",
        "version": {
          "withMetadata": "733ea721781f5ba38cc05db2b408d2e377275514e1d4377b811350aa04db7cdb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TestToken": {
        "src": "contracts/TestToken.sol:1617",
        "version": {
          "withMetadata": "b44eee91e2c7e8f2358cf54fbacf2559f9616026e98c7263ffa161cd8949ce38",
          "withoutMetadata": "be4742be37cf3fe35a74e66e957bd2b8c68d2cdc34e699653a3be332a6893054",
          "linkedWithoutMetadata": "be4742be37cf3fe35a74e66e957bd2b8c68d2cdc34e699653a3be332a6893054"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "()",
          "()",
          "setBUSDRewardsFeeBuy(uint256)",
          "setDevFeeBuy(uint256)",
          "setMarketingFeeBuy(uint256)",
          "setBUSDRewardsFeesSell(uint256)",
          "setDevFeeSell(uint256)",
          "setMarketingFeeSell(uint256)",
          "setBurnFee(uint256)",
          "updateDividendTracker(address)",
          "updateUniswapV2Router(address)",
          "excludeFromFees(address,bool)",
          "excludeMultipleAccountsFromFees(address[],bool)",
          "setAutomatedMarketMakerPair(address,bool)",
          "updateDevWallet(address)",
          "updateGasForProcessing(uint256)",
          "updateClaimWait(uint256)",
          "getClaimWait()",
          "getTotalDividendsDistributed()",
          "SetmaxSellTransactionAmount(uint256)",
          "setswapTokensAtAmount(uint256)",
          "isExcludedFromFees(address)",
          "withdrawableDividendOf(address)",
          "dividendTokenBalanceOf(address)",
          "getAccountDividendsInfo(address)",
          "getAccountDividendsInfoAtIndex(uint256)",
          "processDividendTracker(uint256)",
          "claim()",
          "getLastProcessedIndex()",
          "getNumberOfDividendTokenHolders()",
          "getTradingIsEnabled()"
        ],
        "linkReferences": [
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 20211,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 20427,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 20617,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 21727,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 21835,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 22589,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          }
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestToken",
            "src": "contracts/TestToken.sol:1718"
          },
          {
            "kind": "state-variable-immutable",
            "name": "uniswapV2Pair",
            "src": "contracts/TestToken.sol:1621"
          },
          {
            "kind": "state-variable-assignment",
            "name": "BUSD",
            "src": "contracts/TestToken.sol:1623"
          },
          {
            "kind": "state-variable-immutable",
            "name": "BUSD",
            "src": "contracts/TestToken.sol:1623"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MarketingWallet",
            "src": "contracts/TestToken.sol:1625"
          },
          {
            "kind": "state-variable-assignment",
            "name": "BurnAddress",
            "src": "contracts/TestToken.sol:1626"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MarketingWalletReserve",
            "src": "contracts/TestToken.sol:1633"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DevWalletReserve",
            "src": "contracts/TestToken.sol:1634"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxSellTransactionAmount",
            "src": "contracts/TestToken.sol:1636"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_swapTokensAtAmount",
            "src": "contracts/TestToken.sol:1637"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxTxAmount",
            "src": "contracts/TestToken.sol:1638"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxWalletAmount",
            "src": "contracts/TestToken.sol:1639"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MarketingFeeSell",
            "src": "contracts/TestToken.sol:1645"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MarketingFeeBuy",
            "src": "contracts/TestToken.sol:1646"
          },
          {
            "kind": "state-variable-assignment",
            "name": "BurnFee",
            "src": "contracts/TestToken.sol:1647"
          },
          {
            "kind": "state-variable-immutable",
            "name": "totalFees",
            "src": "contracts/TestToken.sol:1648"
          },
          {
            "kind": "state-variable-assignment",
            "name": "sellFeeIncreaseFactor",
            "src": "contracts/TestToken.sol:1651"
          },
          {
            "kind": "state-variable-immutable",
            "name": "sellFeeIncreaseFactor",
            "src": "contracts/TestToken.sol:1651"
          },
          {
            "kind": "state-variable-assignment",
            "name": "gasForProcessing",
            "src": "contracts/TestToken.sol:1654"
          },
          {
            "kind": "state-variable-assignment",
            "name": "tradingEnabledTimestamp",
            "src": "contracts/TestToken.sol:1657"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tradingEnabledTimestamp",
            "src": "contracts/TestToken.sol:1657"
          },
          {
            "kind": "external-library-linking",
            "name": "IterableMapping",
            "src": "contracts/TestToken.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:785"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:787"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:789"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:791"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:792"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:793"
            },
            {
              "label": "_owner",
              "offset": 1,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/TestToken.sol:567"
            },
            {
              "label": "uniswapV2Router",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IUniswapV2Router02)496",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1620"
            },
            {
              "label": "MarketingWallet",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1625"
            },
            {
              "label": "BurnAddress",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1626"
            },
            {
              "label": "swapping",
              "offset": 20,
              "slot": "8",
              "type": "t_bool",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1627"
            },
            {
              "label": "dividendTracker",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(TestTokenDividendTracker)5049",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1629"
            },
            {
              "label": "DevWallet",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1631"
            },
            {
              "label": "MarketingWalletReserve",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1633"
            },
            {
              "label": "DevWalletReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1634"
            },
            {
              "label": "_maxSellTransactionAmount",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1636"
            },
            {
              "label": "_swapTokensAtAmount",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1637"
            },
            {
              "label": "_maxTxAmount",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1638"
            },
            {
              "label": "_maxWalletAmount",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1639"
            },
            {
              "label": "BUSDRewardsFeeBuy",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1641"
            },
            {
              "label": "BUSDRewardsFeeSell",
              "offset": 0,
              "slot": "18",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1642"
            },
            {
              "label": "DevFeeBuy",
              "offset": 0,
              "slot": "19",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1643"
            },
            {
              "label": "DevFeeSell",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1644"
            },
            {
              "label": "MarketingFeeSell",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1645"
            },
            {
              "label": "MarketingFeeBuy",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1646"
            },
            {
              "label": "BurnFee",
              "offset": 0,
              "slot": "23",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1647"
            },
            {
              "label": "gasForProcessing",
              "offset": 0,
              "slot": "24",
              "type": "t_uint256",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1654"
            },
            {
              "label": "_isExcludedFromFees",
              "offset": 0,
              "slot": "25",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1660"
            },
            {
              "label": "canTransferBeforeTradingIsEnabled",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1663"
            },
            {
              "label": "automatedMarketMakerPairs",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TestToken",
              "src": "contracts/TestToken.sol:1667"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IUniswapV2Router02)496": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_contract(TestTokenDividendTracker)5049": {
              "label": "contract TestTokenDividendTracker",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestTokenDividendTracker": {
        "src": "contracts/TestToken.sol:2249",
        "version": {
          "withMetadata": "a2803342d88169c26161d7747e13f2c2c9c991b390654696c82e1963abcf3d24",
          "withoutMetadata": "99afcb3423dbe26baf24eb41d0cfb00ac6c24c7a5d12c5b8ce85104b24cacf61",
          "linkedWithoutMetadata": "99afcb3423dbe26baf24eb41d0cfb00ac6c24c7a5d12c5b8ce85104b24cacf61"
        },
        "inherit": [
          "Ownable",
          "DividendPayingToken",
          "IDividendPayingTokenOptional",
          "IDividendPayingToken",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt",
          "IterableMapping"
        ],
        "methods": [
          "()",
          "withdrawDividend()",
          "excludeFromDividends(address)",
          "updateClaimWait(uint256)",
          "getLastProcessedIndex()",
          "getNumberOfTokenHolders()",
          "getAccount(address)",
          "getAccountAtIndex(uint256)",
          "setBalance(address payable,uint256)",
          "process(uint256)",
          "processAccount(address payable,bool)"
        ],
        "linkReferences": [
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 3081,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 3297,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 3487,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 4597,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 4705,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          },
          {
            "src": "contracts/TestToken.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 5459,
            "placeholder": "__$28e39cef14f2127ee71ba18b4b8bf6f060$__"
          }
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestTokenDividendTracker",
            "src": "contracts/TestToken.sol:2273"
          },
          {
            "kind": "state-variable-immutable",
            "name": "minimumTokenBalanceForDividends",
            "src": "contracts/TestToken.sol:2262"
          },
          {
            "kind": "external-library-linking",
            "name": "IterableMapping",
            "src": "contracts/TestToken.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:785"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:787"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:789"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:791"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:792"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/TestToken.sol:793"
            },
            {
              "label": "magnifiedDividendPerShare",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1400"
            },
            {
              "label": "lastAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1401"
            },
            {
              "label": "magnifiedDividendCorrections",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_int256)",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1417"
            },
            {
              "label": "withdrawnDividends",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1418"
            },
            {
              "label": "totalDividendsDistributed",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "DividendPayingToken",
              "src": "contracts/TestToken.sol:1420"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/TestToken.sol:567"
            },
            {
              "label": "tokenHoldersMap",
              "offset": 0,
              "slot": "12",
              "type": "t_struct(Map)816_storage",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2254"
            },
            {
              "label": "lastProcessedIndex",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2255"
            },
            {
              "label": "excludedFromDividends",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2257"
            },
            {
              "label": "lastClaimTimes",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2259"
            },
            {
              "label": "claimWait",
              "offset": 0,
              "slot": "19",
              "type": "t_uint256",
              "contract": "TestTokenDividendTracker",
              "src": "contracts/TestToken.sol:2261"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Map)816_storage": {
              "label": "struct IterableMapping.Map",
              "members": [
                {
                  "label": "keys",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "values",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "indexOf",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "inserted",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "cd6d171e61bb261b98605a1e203c6b46b7d5b5cf9ee8cb2a885820c5f6f02fc8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "da930956526c41a5de20d318cd81f377f93fca7b337b877e31fe08d800807f6c",
          "withoutMetadata": "7eaf6e2da372192c65ae6dd6fa3ba2298f35fb14a7a18391f0b8200e2d1c6918",
          "linkedWithoutMetadata": "7eaf6e2da372192c65ae6dd6fa3ba2298f35fb14a7a18391f0b8200e2d1c6918"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TeslaMFInu": {
        "src": "contracts/TeslaMFInu.sol:9",
        "version": {
          "withMetadata": "6ae1f6fb5eb80e08b2466e411797e19bb604bac1ae9adf29bc8a897bf694a2b1",
          "withoutMetadata": "7bb1f9dff8a7979cb672a03449a801eeefe5407156cb46d531526f744a892048",
          "linkedWithoutMetadata": "7bb1f9dff8a7979cb672a03449a801eeefe5407156cb46d531526f744a892048"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "()",
          "getOwner()",
          "setTaxes(uint16,uint16,uint16)",
          "transferOwnership(address)",
          "autoLiquidity(uint256)",
          "burn(uint256)",
          "setMarketingAddress(address)",
          "isExcludedFromFee(address)",
          "excludeFromFee(address,bool)",
          "setSwapThreshold(uint256)",
          "setMaxWalletAmount(uint256)",
          "setMaxTransactionAmount(uint256)",
          "enableTrading()",
          "setMarketingAddressPercent(uint256)",
          "setAutoLiquidityPercentPercent(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TeslaMFInu",
            "src": "contracts/TeslaMFInu.sol:65"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "TeslaMFInu",
              "src": "contracts/TeslaMFInu.sol:11"
            },
            {
              "label": "DEAD",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "TeslaMFInu",
              "src": "contracts/TeslaMFInu.sol:12"
            },
            {
              "label": "lpPair",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "TeslaMFInu",
              "src": "contracts/TeslaMFInu.sol:13"
            },
            {
              "label": "marketingAddress",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "TeslaMFInu",
              "src": "contracts/TeslaMFInu.sol:14"
            },
            {
              "label": "devAddress",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "TeslaMFInu",
              "src": "contracts/TeslaMFInu.sol:15"
            },
            {
              "label": "swapThreshold",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "TeslaMFInu",
              "src": "contracts/TeslaMFInu.sol:18"
            },
            {
              "label": "masterTaxDivisor",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "TeslaMFInu",
              "src": "contracts/TeslaMFInu.sol:19"
            },
            {
              "label": "maxWalletAmount",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "TeslaMFInu",
              "src": "contracts/TeslaMFInu.sol:20"
            },
            {
              "label": "devAddressPercent",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "TeslaMFInu",
              "src": "contracts/TeslaMFInu.sol:21"
            },
            {
              "label": "marketingAddressPercent",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "TeslaMFInu",
              "src": "contracts/TeslaMFInu.sol:22"
            },
            {
              "label": "autoLiquidityPercent",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "TeslaMFInu",
              "src": "contracts/TeslaMFInu.sol:23"
            },
            {
              "label": "maxTransactionAmount",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "TeslaMFInu",
              "src": "contracts/TeslaMFInu.sol:24"
            },
            {
              "label": "inSwap",
              "offset": 0,
              "slot": "17",
              "type": "t_bool",
              "contract": "TeslaMFInu",
              "src": "contracts/TeslaMFInu.sol:27"
            },
            {
              "label": "tradingEnabled",
              "offset": 1,
              "slot": "17",
              "type": "t_bool",
              "contract": "TeslaMFInu",
              "src": "contracts/TeslaMFInu.sol:28"
            },
            {
              "label": "_isExcludedFromFee",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TeslaMFInu",
              "src": "contracts/TeslaMFInu.sol:31"
            },
            {
              "label": "automatedMarketMakerPairs",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TeslaMFInu",
              "src": "contracts/TeslaMFInu.sol:32"
            },
            {
              "label": "dexRouter",
              "offset": 0,
              "slot": "20",
              "type": "t_contract(IUniswapV2Router02)1169",
              "contract": "TeslaMFInu",
              "src": "contracts/TeslaMFInu.sol:49"
            },
            {
              "label": "_feesRates",
              "offset": 0,
              "slot": "21",
              "type": "t_struct(Fees)1232_storage",
              "contract": "TeslaMFInu",
              "src": "contracts/TeslaMFInu.sol:50"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IUniswapV2Router02)1169": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Fees)1232_storage": {
              "label": "struct TeslaMFInu.Fees",
              "members": [
                {
                  "label": "buyFee",
                  "type": "t_uint16",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "sellFee",
                  "type": "t_uint16",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "transferFee",
                  "type": "t_uint16",
                  "offset": 4,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "IERC20": {
        "src": "contracts/BSC Testnet Connections/PancakeRouter.sol:353",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPancakeFactory": {
        "src": "contracts/BSC Testnet Connections/PancakeRouter.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPancakePair": {
        "src": "contracts/BSC Testnet Connections/PancakeRouter.sol:208",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPancakeRouter01": {
        "src": "contracts/BSC Testnet Connections/PancakeRouter.sol:73",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPancakeRouter02": {
        "src": "contracts/BSC Testnet Connections/PancakeRouter.sol:167",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWETH": {
        "src": "contracts/BSC Testnet Connections/PancakeRouter.sol:369",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "PancakeLibrary": {
        "src": "contracts/BSC Testnet Connections/PancakeRouter.sol:274",
        "version": {
          "withMetadata": "175122e74c6a2448b508fe28b34cb5e46729cf7175a675555c5683eb7e4f28f2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "PancakeRouter": {
        "src": "contracts/BSC Testnet Connections/PancakeRouter.sol:375",
        "version": {
          "withMetadata": "3f7fbed8aec2d38c920a1f035963ea0bc34beea699ee8a3a9e491544503fa4e4",
          "withoutMetadata": "fe9a515a7e2825d1136d3c7bd0156f08767310d3c9241635cfa7255885a73866",
          "linkedWithoutMetadata": "fe9a515a7e2825d1136d3c7bd0156f08767310d3c9241635cfa7255885a73866"
        },
        "inherit": [
          "IPancakeRouter02",
          "IPancakeRouter01"
        ],
        "libraries": [
          "SafeMath",
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter",
            "src": "contracts/BSC Testnet Connections/PancakeRouter.sol:386"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/BSC Testnet Connections/PancakeRouter.sol:378"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/BSC Testnet Connections/PancakeRouter.sol:379"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "contracts/BSC Testnet Connections/PancakeRouter.sol:260",
        "version": {
          "withMetadata": "e8bb2503e05100c408121c50f1a6d6e201896f677f8c21cead2a1616e8b96ac4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TransferHelper": {
        "src": "contracts/BSC Testnet Connections/PancakeRouter.sol:26",
        "version": {
          "withMetadata": "80102c522c8e3f23b21b3394fb25769812355038601408c5b3a0c89fe9111219",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "BEP20Token": {
        "src": "contracts/BSC Testnet Connections/BEP20Token.sol:347",
        "version": {
          "withMetadata": "ea872a728bf16c8ad89facdb2b0125b9ab7f9d77fd64342a43b9d96aba778038",
          "withoutMetadata": "d6ec17d7f9b6e119f2b1a758e4f737e830093153b5714697e0ac56791d942c67",
          "linkedWithoutMetadata": "d6ec17d7f9b6e119f2b1a758e4f737e830093153b5714697e0ac56791d942c67"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "mint(uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20Token",
            "src": "contracts/BSC Testnet Connections/BEP20Token.sol:359"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/BSC Testnet Connections/BEP20Token.sol:289"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BEP20Token",
              "src": "contracts/BSC Testnet Connections/BEP20Token.sol:350"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "BEP20Token",
              "src": "contracts/BSC Testnet Connections/BEP20Token.sol:352"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "BEP20Token",
              "src": "contracts/BSC Testnet Connections/BEP20Token.sol:354"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "4",
              "type": "t_uint8",
              "contract": "BEP20Token",
              "src": "contracts/BSC Testnet Connections/BEP20Token.sol:355"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "BEP20Token",
              "src": "contracts/BSC Testnet Connections/BEP20Token.sol:356"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "BEP20Token",
              "src": "contracts/BSC Testnet Connections/BEP20Token.sol:357"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Context": {
        "src": "contracts/BSC Testnet Connections/BEP20Token.sol:112",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IBEP20": {
        "src": "contracts/BSC Testnet Connections/BEP20Token.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "contracts/BSC Testnet Connections/BEP20Token.sol:288",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/BSC Testnet Connections/BEP20Token.sol:296"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/BSC Testnet Connections/BEP20Token.sol:289"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SafeMath": {
        "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:98",
        "version": {
          "withMetadata": "e774f782a37263f644871c47f47523deeb77ed6e37645b8b797a9ef4e0e5b3ff",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:240",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPancakeCallee": {
        "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:256",
        "inherit": [],
        "libraries": [],
        "methods": [
          "pancakeCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPancakeERC20": {
        "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:75",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPancakeFactory": {
        "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPancakePair": {
        "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Math": {
        "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:203",
        "version": {
          "withMetadata": "4aac2cd12b6cc6306419c139454f2530ce8dc86fb2d78fdb2f2fc26b81cbcb52",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "PancakeERC20": {
        "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:112",
        "version": {
          "withMetadata": "b55e111799c297f95fe3243d55014369645ffc6023a626190250260b80ab51c8",
          "withoutMetadata": "b55e111799c297f95fe3243d55014369645ffc6023a626190250260b80ab51c8",
          "linkedWithoutMetadata": "b55e111799c297f95fe3243d55014369645ffc6023a626190250260b80ab51c8"
        },
        "inherit": [
          "IPancakeERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeERC20",
            "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:130"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "PancakeERC20",
              "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:118"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "PancakeERC20",
              "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:119"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "PancakeERC20",
              "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:120"
            },
            {
              "label": "DOMAIN_SEPARATOR",
              "offset": 0,
              "slot": "3",
              "type": "t_bytes32",
              "contract": "PancakeERC20",
              "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:122"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "PancakeERC20",
              "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:125"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "PancakeFactory": {
        "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:452",
        "version": {
          "withMetadata": "f9f38632e59c58c184f9595ca616176f6bdfa4c80c26b7c561caafadb5451edf",
          "withoutMetadata": "71d6aea5d77c89d61d078d24e7ab2fdc67c43de52a34bd271470fbb2f271a015",
          "linkedWithoutMetadata": "71d6aea5d77c89d61d078d24e7ab2fdc67c43de52a34bd271470fbb2f271a015"
        },
        "inherit": [
          "IPancakeFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeFactory",
            "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:463"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "feeTo",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PancakeFactory",
              "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:455"
            },
            {
              "label": "feeToSetter",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PancakeFactory",
              "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:456"
            },
            {
              "label": "getPair",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "contract": "PancakeFactory",
              "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:458"
            },
            {
              "label": "allPairs",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_address)dyn_storage",
              "contract": "PancakeFactory",
              "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:459"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "PancakePair": {
        "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:260",
        "version": {
          "withMetadata": "3c4eae323c1d53141d05be1f266dee95396c6483aaf96a57a707f3ec087d4b6d",
          "withoutMetadata": "3c4eae323c1d53141d05be1f266dee95396c6483aaf96a57a707f3ec087d4b6d",
          "linkedWithoutMetadata": "3c4eae323c1d53141d05be1f266dee95396c6483aaf96a57a707f3ec087d4b6d"
        },
        "inherit": [
          "PancakeERC20",
          "IPancakeERC20",
          "IPancakePair"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakePair",
            "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:310"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:279"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "PancakeERC20",
              "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:118"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "PancakeERC20",
              "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:119"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "PancakeERC20",
              "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:120"
            },
            {
              "label": "DOMAIN_SEPARATOR",
              "offset": 0,
              "slot": "3",
              "type": "t_bytes32",
              "contract": "PancakeERC20",
              "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:122"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "PancakeERC20",
              "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:125"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "PancakePair",
              "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:267"
            },
            {
              "label": "token0",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "PancakePair",
              "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:268"
            },
            {
              "label": "token1",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "PancakePair",
              "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:269"
            },
            {
              "label": "reserve0",
              "offset": 0,
              "slot": "8",
              "type": "t_uint112",
              "contract": "PancakePair",
              "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:271"
            },
            {
              "label": "reserve1",
              "offset": 14,
              "slot": "8",
              "type": "t_uint112",
              "contract": "PancakePair",
              "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:272"
            },
            {
              "label": "blockTimestampLast",
              "offset": 28,
              "slot": "8",
              "type": "t_uint32",
              "contract": "PancakePair",
              "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:273"
            },
            {
              "label": "price0CumulativeLast",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "PancakePair",
              "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:275"
            },
            {
              "label": "price1CumulativeLast",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "PancakePair",
              "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:276"
            },
            {
              "label": "kLast",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "PancakePair",
              "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:277"
            },
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "PancakePair",
              "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:279"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint112": {
              "label": "uint112",
              "numberOfBytes": "14"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UQ112x112": {
        "src": "contracts/BSC Testnet Connections/PancakeFactory.sol:226",
        "version": {
          "withMetadata": "942571b02b24ff92b7fe67a9ac37f72a0d5c160db5006f63669b0a5ba11d0583",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "WBNB": {
        "src": "contracts/BSC Testnet Connections/WBNB.sol:7",
        "version": {
          "withMetadata": "0d8b51e1510100bc81189adc2f43dfb1c0caf3d1dd3dd483b9eb03b48bbc21cf",
          "withoutMetadata": "744a68f567b443c4366f0c261dd32e3ea8a733d1a5f2f7403a36248dd397e910",
          "linkedWithoutMetadata": "744a68f567b443c4366f0c261dd32e3ea8a733d1a5f2f7403a36248dd397e910"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "deposit()",
          "withdraw(uint256)",
          "totalSupply()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "name",
            "src": "contracts/BSC Testnet Connections/WBNB.sol:8"
          },
          {
            "kind": "state-variable-assignment",
            "name": "symbol",
            "src": "contracts/BSC Testnet Connections/WBNB.sol:9"
          },
          {
            "kind": "state-variable-assignment",
            "name": "decimals",
            "src": "contracts/BSC Testnet Connections/WBNB.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WBNB",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/BSC Testnet Connections/WBNB.sol:8"
            },
            {
              "contract": "WBNB",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/BSC Testnet Connections/WBNB.sol:9"
            },
            {
              "contract": "WBNB",
              "label": "decimals",
              "type": "t_uint8",
              "src": "contracts/BSC Testnet Connections/WBNB.sol:10"
            },
            {
              "contract": "WBNB",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BSC Testnet Connections/WBNB.sol:17"
            },
            {
              "contract": "WBNB",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BSC Testnet Connections/WBNB.sol:18"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string storage pointer"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    }
  ]
}